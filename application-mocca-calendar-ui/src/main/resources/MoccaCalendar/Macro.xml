<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="MoccaCalendar.Macro" locale="">
  <web>MoccaCalendar</web>
  <name>Macro</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1379057815000</creationDate>
  <parent>MoccaCalendar.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1605197414000</date>
  <contentUpdateDate>1605197414000</contentUpdateDate>
  <version>1.1</version>
  <title>Calendar Macro</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>Example usage:

{{code}}

{{moccacalendar /}}

or

{{moccacalendar filter="space" /}}

or

{{moccacalendar filter="wiki" /}}
{{/code}}

{{moccacalendar filter="wiki"/}}
</content>
  <object>
    <name>MoccaCalendar.Macro</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>f8f9ab2d-9632-4662-af2b-e53db70f9191</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('moccaCalendar', ['jquery', 'fullcalendar', 'moment'], function(jQuery, fullCalendar, moment) {

// Make sure the XWiki 'namespace' and the ModalPopup class exist.
if (typeof(XWiki) == "undefined" || typeof(XWiki.widgets) == "undefined" || typeof(XWiki.widgets.ModalPopup) == "undefined") {
  if (typeof console != "undefined" &amp;&amp; typeof console.warn == "function") {
    console.warn("[MessageBox widget] Required class missing: XWiki.widgets.ModalPopup");
  }
} else {
  if (typeof(XWiki.MoccaCalendar) == "undefined") {
    XWiki.MoccaCalendar = {};
  }

#template('colorThemeInit.vm')

  XWiki.MoccaCalendar.Helper = Class.create({
  initialize: function(calendar, dateFormat, jsonServiceUrl, createEventBaseUrl, updateEventUrl, newPageParams, formToken) {
    this.calendar = calendar;
    this.dateFormat = dateFormat;
    this.jsonServiceUrl = jsonServiceUrl;
    this.createEventBaseUrl = createEventBaseUrl;
    this.updateEventUrl = updateEventUrl;
    this.newPageParams = newPageParams;
    this.formToken = formToken;
    // hack: extract the "day only" and "time only" format, if possible
    // assumes time comes after the day
    var tSep = dateFormat.search(/[hk]/i)
    if (tSep != -1) {
      this.timeFormat = dateFormat.substring(tSep, dateFormat.length);
      this.dayFormat = dateFormat.substring(0, tSep-1);
    } else { // ??
      this.timeFormat = '';
      this.dayFormat = dateFormat;
    }
  },
  displayError: function(errorMessage) {
    if (!errorMessage) {
      errorMessage = "$escapetool.javascript($services.localization.render('MoccaCalendar.generic.errormessage'))";
    }
    new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.failed'))" + errorMessage, "error");
  },
  showCreateEventFrom: function(start, end) {
    var allDay = !start.hasTime();
    var singleDay = (allDay &amp;&amp; end.diff(start,'days') &lt;= 1);

    var mySimpleDateFormatter = new Externals.SimpleDateFormat(this.dateFormat);
    start = mySimpleDateFormatter.format(start.local().toDate());
    end = (singleDay)?'':mySimpleDateFormatter.format(end.local().toDate());
    var paramPrefix = "MoccaCalendar.MoccaCalendarEventClass_0_";
    var params = "&amp;" + paramPrefix + "startDate=" + encodeURIComponent(start);
    params += "&amp;" + paramPrefix + "endDate=" + encodeURIComponent(end);
    params += "&amp;" + paramPrefix + "allDay=" + allDay;
    return this.showCreateEvent(params);
  },
  showCreateEvent: function(extraParams) {
    var params = extraParams || '';
    return new XWiki.MoccaCalendar.MoccaCalendarPopup({pageURL: this.createEventBaseUrl + params}, this);
  },
  updateEvent: function(page, isResize, delta, startDate, endDate, revertFunc) {
    var savingBox = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.inProgress'))", "inprogress", {inactive: true});
    var savedBox = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.done'))", "done", {inactive: true});
    var calendar = this.calendar;

    savingBox.show();
    savedBox.hide();

    // let's call the calendar update
    var params = "page=" +  encodeURIComponent(page) + "&amp;isResize=" + (isResize ? "1" : "0") + "&amp;delta=" + delta.asMilliseconds() + "&amp;startDate=" + startDate.format()
    if (endDate) { params += "&amp;endDate=" + endDate.format(); }
    params += "&amp;allDay=" + (startDate.hasTime()?"":"1");
    var url = this.updateEventUrl + params;
    jQuery.ajax(url).fail(function (data) {
      savingBox.hide();
      this.displayError();
      if (revertFunc) revertFunc();
    }.bind(this)).success(function (data) {
      if (data.indexOf("OK ")==0) {
        savingBox.hide();
        savedBox.show();
        calendar.fullCalendar('refetchEvents');
      } else {
        savingBox.hide();
        this.displayError();
        if (revertFunc) revertFunc();
      }
    }.bind(this));
  }
  });

  // 
  // "static" helpers
  //
  XWiki.MoccaCalendar.Helper.getCalendarView = function(defaultVal) {
    var cookieName = 'MoccaCalendar_view=';
    if (document.cookie) {
      var ca = document.cookie.split(';');
      for(var i=0;i&lt;ca.length;i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1,c.length);
        if (c.indexOf(cookieName) == 0) return c.substring(cookieName.length,c.length);
      }
    }
    return defaultVal;
  };

  XWiki.MoccaCalendar.Helper.setCalendarView = function(value) {
    var cookieName = 'MoccaCalendar_view=';
    document.cookie = cookieName + value + "; path=/";
  };

  //
  // the dialog to show / edit events
  //
  XWiki.MoccaCalendar.MoccaCalendarPopup = Class.create(XWiki.widgets.ModalPopup, {
    defaultInteractionParameters: {
      editMode : true
    },
    initialize: function($super, interactionParameters, helper) {
      this.interactionParameters = Object.extend(Object.clone(this.defaultInteractionParameters), interactionParameters || {});
      this.interactionParameters.isNew = (undefined == this.interactionParameters.event)
      this.helper = helper;
      this.saving = false;
      // call constructor from ModalPopup with params content, shortcuts, options
      $super(
        // this element will end up as 'this.content'
        new Element('form', {'class' : 'xform'}),
        {
          "show": {method: this.showDialog, keys: []},
          "close": {method: this.closeDialog, keys: ['Esc']}
        },
        {
          verticalPosition: "top",
          backgroundColor: "$theme.pageHeaderBackgroundColor",
          title : this.interactionParameters.editMode ? "$escapetool.javascript($services.localization.render('MoccaCalendar.calendarevent.create'))" : "$escapetool.javascript($services.localization.render('MoccaCalendar.calendarevent.view'))"
        }
      );
      this.loadEventContent();
      this.showDialog();
      this.setClass("moccacal-modal-popup");

      $$(".xdialog-modal-container").each(function(div) { div.setStyle({position: 'absolute'}) }); // MOCCACAL-32

      this.savingBox = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.inProgress'))", "inprogress", {inactive: true});
      this.savedBox = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.done'))", "done", {inactive: true});
      this.savingBox.hide();
      this.savedBox.hide();
    },

    loadEditForm: function(event) {
      event.stop();
      this.interactionParameters.editMode = true;
      this.loadEventContent();
    },

    submitForm: function(event) {
      event.stop();
      var titleField = this.content.down('[name="title"]');

      var title = $(titleField).getValue();
      if (title.length == 0) {
        $$(".val_title_notempty").each(Element.show);
        return false;
      }
      else {
        $$(".val_title_notempty").each(Element.hide);
      }
      this.saving = true; // signal other events we are about to save

      this.savedBox.hide();
      this.savingBox.show();

      if (this.interactionParameters.isNew) {
       // calculate "automatic" document name:
       var name = title.replace(/[\/?]/g,'').replace(/^ +/,'').replace(/ +$/,'');

       // ask the JSONService to create an unused event name for us      
       new Ajax.Request( this.helper.jsonServiceUrl, {
        method: 'get',
        parameters: { 'outputSyntax': 'plain', 'newEvent' : name, 'parent': $F($("calendarParent")) },
        onSuccess: function(response) {
          try {
            var error = (response.responseJSON) ? response.responseJSON['error'] : "$escapetool.javascript($services.localization.render('MoccaCalendar.generic.errormessage'))";
            if (error) {
              this.savingBox.hide();
              this.helper.displayError(error);
            } else {
              var eventName = response.responseJSON['name'];
              var parentLocation = response.responseJSON['parent']; 
              this.saveEvent(parentLocation, eventName);
            }
          } catch(e) { alert(e); }
        }.bind(this),
        onFailure: function(response) {
          // this should not happen ...
          try {
            this.saving = false;
            this.savingBox.hide();
            this.helper.displayError();
          } catch(e) { alert(e); }
        }.bind(this)
       });
      } else {
        this.saveEvent();
      }
      
      return false;
    },

    /** save the current event.
        Note: parameters are only used if event is new, as otherwise we know the url to save the event to already
    */
    saveEvent: function(parentCalendar, newEventName) {
      var saveUrl;
      if (this.interactionParameters.isNew) {
        var calendarRef = XWiki.Model.resolve(parentCalendar, XWiki.EntityType.SPACE);
        var newEventSpaceRef = new XWiki.EntityReference(newEventName, XWiki.EntityType.SPACE, calendarRef);
        var newEventRef = new XWiki.EntityReference("WebHome", XWiki.EntityType.DOCUMENT, newEventSpaceRef);
        saveUrl = new XWiki.Document(newEventRef).getURL('save', this.helper.newPageParams);
      } else {
        saveUrl = this.interactionParameters.event.saveUrl;
      }
      this.content.writeAttribute('action', saveUrl + '&amp;xpage=plain&amp;ajax=true');
      this.content.request({
        onSuccess: function() {
          this.saving = false;
          this.savingBox.hide();
          this.savedBox.show();
          this.closeDialog();
          this.helper.calendar.fullCalendar('refetchEvents');
        }.bind(this),
        onFailure: function(e) {
          try {
            this.saving = false;
            var responseText = e.responseText;
            $("forminnercontent").innerHTML = responseText;
            this.savingBox.hide();
            if (e.status &gt; 400) { this.helper.displayError(); } 
            $$('input.datetime').each(function(dateTimeInput) {
              new XWiki.DateTimePicker(dateTimeInput, dateTimeInput.title);
            });
          } catch (e) {
            alert('Failed to save event!');
          }
        }.bind(this)
      })
    },

    deleteEvent: function() {
      var pending = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.inProgress'))", "inprogress");
      new Ajax.Request(this.interactionParameters.event.deleteUrl, {
        method: 'post',
        parameters: {'confirm': 1, 'ajax': true, 'form_token': this.helper.formToken},
        onSuccess: function(transport) {
          if (transport.status == 0) {
            return;
          }
          pending.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.done'))", "done");
          this.helper.calendar.fullCalendar('refetchEvents');
        }.bind(this),
        onFailure: function(e) {
          pending.hide();
          this.helper.displayError();
        }.bind(this)
      });
    },

    loadEventContent: function() {
      var url;
      if (this.interactionParameters.isNew) {
        url = this.interactionParameters.pageURL;
      } else {
        url = (this.interactionParameters.editMode)?this.interactionParameters.event.editUrl:this.interactionParameters.event.url;
      }
      new Ajax.Request(url, {
        method: 'get',
        parameters: {'xpage': 'plain', 'xhidden': 1},
        onSuccess: function(transport) {
          if (transport.status == 0) {
            return;
          }
          var response = transport.responseText || "no response text";
          var old = $('formcontent');
          if (old) {
            old.purge();
            old.remove();
          }
          this.injectHTML(this.content, response);
          var formcontent = $('formcontent');
          var buttons = new Element('div', {'class':'buttons'});
          var oldSkin = ! $('body').hasClassName('skin-flamingo'); // FIXME: bad b/w compat hack
          formcontent.insert(buttons);
          if (this.interactionParameters.editMode) {
            var that = this;
            buttons.insert(this.createButton("submit","$escapetool.javascript($services.localization.render('save'))","","save-moccacalendar-event","btn"));
            buttons.down('#save-moccacalendar-event').observe('click', this.submitForm.bind(this));
            buttons.insert('&lt;span class="buttonwrapper"&gt;&lt;a href="#" id="cancel-moccacalendar-event" class="secondary button"&gt;' + "$escapetool.javascript($services.localization.render('cancel'))" + '&lt;/a&gt;&lt;/span&gt;');
            buttons.down('#cancel-moccacalendar-event').observe('click', this.closeDialog.bind(this));
            $$('input.datetime').each(function(dateTimeInput) {
              dateTimeInput.observe('change', function(event) {
                 that.handleDatetimeFieldChange(event, $(this));
              });
            });

            // this is the "all day" box
            this.allDay = $('MoccaCalendar.MoccaCalendarEventClass_0_allDay');
            this.allDay.observe('change', function(event) {
              that.handleAllDayFieldChange(event, $(this));
            });
            // use handler to init date picker, too
            that.handleAllDayFieldChange(null, this.allDay);

            $("MoccaCalendarEvent.MoccaCalendarEventClass_0_title").focus();
          } else {
            var leftGroup = new Element('div', {'class':'btn-group btn-group-left'});
            buttons.insert(leftGroup);
            if (this.interactionParameters.event.canEdit) {
              if (oldSkin) {
                leftGroup.insert(this.createButton("button","$escapetool.javascript($services.localization.render('edit'))","","edit-moccacalendar-event","btn"));
              } else {
                leftGroup.insert('&lt;button class="button btn btn-default" id="edit-moccacalendar-event"&gt;&lt;span class="glyphicon glyphicon-pencil"&gt;&lt;/span&gt; '+"$escapetool.javascript($services.localization.render('edit'))"+'&lt;/button&gt;');
              }
              leftGroup.down("#edit-moccacalendar-event").observe('click', this.loadEditForm.bind(this));
            }
            // FIXME: this should be a plain link, but then it has no styles
            if (oldSkin) {
              leftGroup.insert(this.createButton("button","$escapetool.javascript($services.localization.render('view'))","","view-moccacalendar-event","btn"));
              leftGroup.insert('&lt;span class="buttonwrapper"&gt;&lt;a href="#" id="cancel-moccacalendar-event" class="secondary button"&gt;' + "$escapetool.javascript($services.localization.render('cancel'))" + '&lt;/a&gt;&lt;/span&gt;');
            } else {
              leftGroup.insert(' &lt;button class="button btn btn-default" id="view-moccacalendar-event"&gt;&lt;span class="glyphicon glyphicon-file"&gt;&lt;/span&gt; '+"$escapetool.javascript($services.localization.render('view'))"+'&lt;/button&gt;');
              leftGroup.insert('&lt;button class="button btn btn-default" id="cancel-moccacalendar-event"&gt;&lt;span class="glyphicon glyphicon-remove"&gt;&lt;/span&gt; '+"$escapetool.javascript($services.localization.render('cancel'))"+'&lt;/button&gt;');
            }
            leftGroup.down("#view-moccacalendar-event").observe('click', function(e) { e.stop(); window.location.href = this.interactionParameters.event.url; }.bind(this));
            leftGroup.down('#cancel-moccacalendar-event').observe('click', this.closeDialog.bind(this));
            if (this.interactionParameters.event.canDelete) {
              var rightGroup = new Element('div', {'class':'btn-group btn-group-right'});
              buttons.insert(rightGroup);
              if (oldSkin) {
                rightGroup.insert(this.createButton("button","$escapetool.javascript($services.localization.render('delete'))","","delete-moccacalendar-event","btn"));
              } else {
                var button = ' &lt;button class="button remove-button btn btn-danger" type="button"' +
                  'id="delete-moccacalendar-event" data-toggle="modal" data-target="#deleteEvents"&gt;'
                var span = '&lt;span class="glyphicon glyphicon-remove"&gt; &lt;/span&gt; '
                rightGroup.insert(button + span +
                  "$escapetool.javascript($services.localization.render('delete'))"+'&lt;/button&gt;');
              }
              jQuery(rightGroup).find('#delete-moccacalendar-event').data('calendarPopup', this);
            }
            formcontent.insert(new Element('div', {'class': 'clearfloats'}));
          }
        }.bind(this),
        onFailure: function() {
          this.content.insert('Something went wrong...');
        }.bind(this)
      });
    },
    injectHTML: function(content, response) {
      // We don't use Element#update() because it doesn't move external scripts and sheets into HEAD and also because we
      // don't want to support in-line scripts in displayers.
      var container = new Element('div');
      container.innerHTML = response;
      var head = document.body.previous('head');
      container.select('link').each(function(link) {
        head.insert(link);
      });
      container.select('script').each(function(script) {
        if (script.src) {
          head.insert(new Element('script', {type: script.type, src: script.readAttribute('src')}));
        }
        script.remove();
      });
      content.insert('&lt;div id="formcontent"&gt;&lt;div id="forminnercontent"&gt;' + container.innerHTML + '&lt;/div&gt;&lt;/div&gt;');
    },
    handleDatetimeFieldChange : function(event, element) {
      if (this.saving) { return; }
      var dateStr = element.getValue()
      if (dateStr.match(/^\s*$/)) {
        return;
      }

      // now we would have to find out if the user has typed in something like a date with a time
      // for this we have to parse the date. as we do not have any generic way to do that we send it to the backend ...
      this.checkIfDateWithTime(function(result) {
         var allDay = result.responseJSON.isAllDay;
         if (allDay === '') { return; } // indeterminate
         if (allDay != this.allDay.getValue()) {
           this.allDay.setValue(allDay)
           this.handleAllDayFieldChange(null, this.allDay)
         }
      }.bind(this))
    },
    checkIfDateWithTime : function(callback) {
      new Ajax.Request( this.helper.jsonServiceUrl, {
        method: 'get',
        parameters: {action: 'checkDate', outputSyntax: 'plain', 'startDate' : $F('MoccaCalendar.MoccaCalendarEventClass_0_startDate'), 'endDate' : $F('MoccaCalendar.MoccaCalendarEventClass_0_endDate')},
        onSuccess: callback,
        onFailure: function(response) {
          // this should not happen ...
          try {
            this.helper.displayError();
          } catch(e) { alert(e); }
        }.bind(this)
      })
    },

    handleAllDayFieldChange : function(event, element) {
      if (this.saving) { return; }
      var that = this;
      $$('input.datetime').each(function(d) {
        // clear old observer
        var dateField = $(d);
        dateField.stopObserving('focus');
        dateField.stopObserving('click');

        // update title date format and add a new date picker
        //FIXME: it would be great if we could remove / restore the time values of the date
        // but for this we would really need to be able to parse the date on client side
        var newFormat = element.getValue() ? that.helper.dayFormat : that.helper.dateFormat;
        dateField.writeAttribute('title', newFormat);
        new XWiki.DateTimePicker(dateField, newFormat);
      })
    }
  });


  //
  // our "agenda" view - a bit different from what fullCalendar calls an "agenda"
  // so for fullCalendar we call it "plainList"
  //
  var PlainList = fullCalendar.View.extend({

    initialize: function() {
       this.isPast = false;
       this.intervalDuration = moment.duration(10, 'year');
    },

    // Given a single current unzoned date, produce information about what range to display.
    // Subclasses can override. Must return all properties.
    // we only have two ranges:
    //   if date is in the past: from 10yrs ago to yesterday
    //   if date is in the future: from now to 10yrs in the future
    computeRange: function(date) {
      start = this.calendar.getNow().clone().stripTime();
      this.isPast = date.isBefore(start)
      if (this.isPast) {
        end = start.clone().subtract(1, 'd')
        start = start.subtract(10, 'y')
      } else {
        end = start.clone().add(10, 'y')
      }
      return {
        intervalUnit: 'year',
        intervalStart: start,
        intervalEnd: end,
        start: start,
        end: end
      };
    },

    // this method is both called with the pre/next buttons
    // and from other places to ensure the date is in range.
    // we massively abuse this to have only two outcomes:
    // a) if the date is in the past, page it yesterday
    // b) if the date is in the future, make it today
    massageCurrentDate: function(date, direction) {
        now = this.calendar.getNow().clone().stripTime();

        if (date.isBefore(now)) {
           date = now.subtract(1, 'd');
        } else {
           date = now;
        }

        return date;
    },


    renderSkeleton: function() {
      this.el.append('&lt;div class="fc-timeline-box" style="width:100%"/&gt;');
      this.container = jQuery('.fc-timeline-box',this.el);
      this.container.append('&lt;img src="$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')" alt="$escapetool.xml($services.localization.render('platform.livetable.loading'))" /&gt;');
    },

    computeTitle: function() {
      if (this.isPast) {
        this.title = "$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist.titlepast'))";
        this.noEventMsg = "$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist.nopastevents'))";
      } else {
        this.title = "$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist.titleupcoming'))";
        this.noEventMsg = "$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist.noupcomingevents'))";
      }
      return this.title;
    },
  
    destroyEvents: function() {
      if (this.container) { this.container.empty(); }
    },
  
    renderEvents: function(events) {
      jQuery('img', this.container).remove();
      if (events.length == 0) {
        this.container.append('&lt;p&gt;&lt;/p&gt;');
        jQuery('p', this.container).addClass('noevents').text(this.noEventMsg);
      } else for (var i=0; i&lt;events.length; i++) {
        var ev = events[i];
        this.container.append(ev.html || ev.title)
      }
    },

    // drag &amp; drop protocol - no-ops
    select: function(start, end) {
      // console.log('select');
    },
    unselect: function() {
      // console.log('unselect');
    },

  }) // end PlainList extends View

  jQuery.fullCalendar.views.plainList = PlainList;
} // if the XWiki.widgets.ModalPopup  is defined

});

/**
 * Deleting an event
 */
require(['jquery'], function($) {
  /**
  * Events triggered before deleteEvents modal is shown: save the button that triggers
  * the modal, close MoccaCalendarPopup, update the name of event on displayed text.
  */
  $(document).on('show.bs.modal', '#deleteEvents', function(event) {
    var relatedTarget = $(event.relatedTarget);
    $(this).data('relatedTarget', relatedTarget);
    var calendarPopup = relatedTarget.data('calendarPopup');
    calendarPopup.closeDialog();
    var eventName = '«' + calendarPopup.interactionParameters.event.title + '»';
    $(this).find('.modal-body').text(
      $jsontool.serialize($services.localization.render('MoccaCalendar.calendarevent.confirmDelete', '__replace__'))
      .replace('__replace__', eventName));
  });
  /**
  * Events on modal buttons, for deleting an event or cancelling the action.
  */
  $(document).on('click', '#deleteEvents input.btn-danger', function() {
    var relatedTarget = $('#deleteEvents').data('relatedTarget');
    var calendarPopup = relatedTarget.data('calendarPopup');
    calendarPopup.deleteEvent();
  });
  $(document).on('click', '#deleteEvents input.btn-default', function() {
    var relatedTarget = $('#deleteEvents').data('relatedTarget');
    var calendarPopup = relatedTarget.data('calendarPopup');
    new XWiki.MoccaCalendar.MoccaCalendarPopup(calendarPopup.interactionParameters, calendarPopup.helper);
  });
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Macro</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>39fbab16-bd28-4179-b01b-be606a79f869</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>/* events */
div.calendar_date_select {
  z-index: 1010;
}
div.moccaevent {
  border-style:solid;
  border-width:0 0 0 5px;
  padding-left: 5px;
}
div.moccaevent h5 {
  margin-bottom: 5px;
}

/* events in the modal dialog */
div.xdialog-box-moccacal-modal-popup .btn-group.btn-group-left {
  float: left;
}
div.xdialog-box-moccacal-modal-popup .btn-group.btn-group-right {
  float: right;
}
div.xdialog-box-moccacal-modal-popup .btn-group .btn + .btn {
  margin-left: 1ex;
}
/* a special rule for flamingo to try to fit the edit form in the model dialog */
.skin-flamingo div.xdialog-box-moccacal-modal-popup .xform dl dt {
   margin-top: 0.6em;
}
.xdialog-box-moccacal-modal-popup {
  width: 600px;
}

/* calendar */
body .fc {
  padding-right: 1px; /* odd hack to avoid scrollbars in FF at times */
}
div.calendar-buttons {
  position: relative;
  margin-top: 2.4em;
}
.skin-flamingo div.calendar-buttons {
  margin-top: 2.8em;
}
div.calendar-buttons span.buttonwrapper {
  position: absolute;
  right: 0;
  top: -2.2em;
  margin: 0;
}
.skin-flamingo div.calendar-buttons span.buttonwrapper {
  right: 1px;
  top: -2.8em;
}
/* special rules if showing calendars as gadgets in the dashboard - everything is a bit smaller to fit in */
.gadget .fc-toolbar, .gadget div.calendar-buttons {
  font-size: 85%;
}
.gadget div.calendar-buttons span.buttonwrapper {
  top: -2em;
}
.skin-flamingo .gadget div.calendar-buttons span.buttonwrapper {
  top: -3.2em;
}
.gadget .fc h2 {
  border: 0;
}
.skin-flamingo .gadget .fc h2 {
  font-size: 140%;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Macro</name>
    <number>0</number>
    <className>XWiki.WikiMacroClass</className>
    <guid>c3a17b3d-6af7-4265-bbf0-844451bb73f1</guid>
    <class>
      <name>XWiki.WikiMacroClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <code>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>code</name>
        <number>9</number>
        <prettyName>Macro code</prettyName>
        <rows>20</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentDescription>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>contentDescription</name>
        <number>8</number>
        <prettyName>Content description (Not applicable for "No content" type)</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </contentDescription>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>7</number>
        <prettyName>Macro content type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Optional|Mandatory|No content</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <defaultCategory>
        <disabled>0</disabled>
        <name>defaultCategory</name>
        <number>4</number>
        <prettyName>Default category</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultCategory>
      <description>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>description</name>
        <number>3</number>
        <prettyName>Macro description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <id>
        <disabled>0</disabled>
        <name>id</name>
        <number>1</number>
        <prettyName>Macro id</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </id>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Macro name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <supportsInlineMode>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>supportsInlineMode</name>
        <number>5</number>
        <prettyName>Supports inline mode</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </supportsInlineMode>
      <visibility>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>visibility</name>
        <number>6</number>
        <prettyName>Macro visibility</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Current User|Current Wiki|Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </visibility>
    </class>
    <property>
      <code>{{velocity output="false"}}
$xwiki.jsx.use("Calendar.FullCalendar", {'defer': false, 'minify': false})
$xwiki.jsx.use("MoccaCalendar.Macro", {'defer': false, 'v' : '2.6'})
$xwiki.jsx.use("MoccaCalendar.DatePickerExtension", {'defer': false})
## A simple date picker widget.
$xwiki.ssfx.use('uicomponents/widgets/datepicker/calendarDateSelect.css', true)
$xwiki.jsfx.use('uicomponents/widgets/datepicker/calendarDateSelect.js', true)
## Used to parse and serialize the selected date using the date format specified in the XClass.
$xwiki.jsfx.use('uicomponents/widgets/datepicker/simpleDateFormat.js', true)
## A wrapper over the CalendarDateSelect widget that uses the SimpleDateFormat to parse/serialize the dates.
$xwiki.ssfx.use('uicomponents/widgets/datepicker/dateTimePicker.css', true)
$xwiki.jsfx.use('uicomponents/widgets/datepicker/dateTimePicker.js')
$xwiki.ssx.use("Calendar.FullCalendar")
$xwiki.ssx.use("MoccaCalendar.Macro")
#set($calcounter = $request.getAttribute('MoccaCalendar.Macro:counter'))
#if(!$calcounter) #set($calcounter = 0) #else #set($calcounter = $calcounter + 1) #end
#set($discard = $request.setAttribute('MoccaCalendar.Macro:counter', $calcounter))
#set($filter = $xcontext.macro.params.filter)
#if(!$filter)
#set($filter = 'page') ## possible values are wiki, space, page
#end
#set($calendarDoc = $xcontext.macro.params.calendarDoc)
#if(!$calendarDoc)
#set($calendarDoc = $doc.fullName)
#end
#set($defaultView = $xcontext.macro.params.defaultView)
#if(!$defaultView)
 #set($defaultView = "")
#end
#set($firstDay = $xcontext.macro.params.firstDay)
#if(!$firstDay)
  #set($firstDay = "$services.localization.render('MoccaCalendar.calendar.firstDayOfWeek')")
#end
#set($minTime = $xcontext.macro.params.minTime)
#if(!$minTime)
  #set($minTime = "")
#else
  ## b/w compat:
  #if($minTime.indexOf(':')&lt;0))
    #set($minTime = "$minTime:00")
  #end
#end
#set($maxTime = $xcontext.macro.params.maxTime)
#if(!$maxTime)
  #set($maxTime = "")
#else
  ## b/w compat:
  #if($maxTime.indexOf(':')&lt;0))
    #set($maxTime = "$maxTime:00")
  #end
#end
#set($year = $xcontext.macro.params.year)
#if(!$year)
 #set($year = "")
#end
#set($month = $xcontext.macro.params.month)
#if(!$month)
 #set($month = "")
#end
#set($date = $xcontext.macro.params.date)
#if(!$date)
 #set($date = "")
#end
## If the date format is not set in MoccaCalendarEventClass, we are gone use the date format from the current wiki.
#set($dateFormat = $!xwiki.getClass("MoccaCalendar.MoccaCalendarEventClass").get("startDate").getProperty('dateFormat').value)
#if("$!dateFormat" == "")
  #set($dateFormat = $xwiki.getXWikiPreference('dateformat', 'dd.MM.yyyy HH:mm:ss'))
#end

##
## some hardwired values that you can feel free to customize
##
#set($jsonUrl = $xwiki.getDocument("MoccaCalendar.JSONService").getURL("get"))
#set($updateUrl = $xwiki.getDocument("MoccaCalendar.UpdateService").getURL("get"))
#set($left = "prev,next today")
#set($center = "title")
#set($right = "agendaDay,agendaWeek,month,plainList")

#set($canCreateEvents = $xwiki.hasAccessLevel("edit", $xcontext.getUser(), $calendarDoc))

## Macro for the modal that's used on deleting an event
#macro(showDeleteEventsModal)
  &lt;div class="modal fade" id="deleteEvents" tabindex="-1" role="dialog"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal"&gt;&amp;times;&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;
            $services.localization.render('moccacalendarevent.livetable._actions.delete')
          &lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;div&gt;$services.localization.render('MoccaCalendar.calendarevent.confirmDelete')&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="modal-footer"&gt;
          &lt;input type="button" class="btn btn-danger"
            value="$escapetool.xml($services.localization.render('yes'))" data-dismiss="modal"&gt;
          &lt;input type="button" class="btn btn-default"
            value="$escapetool.xml($services.localization.render('no'))" data-dismiss="modal"&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
#end
{{/velocity}}

{{include reference="Licenses.Code.VelocityMacros"/}}

{{velocity}}
## We need to check if there is a valid license because the macro is registered even if the user doesn't have view right
## on the macro definition page. See XWIKI-14828: Rendering macros defined in wiki pages are available to users that
## don't have view right on those pages.
#set ($mainReference = $services.model.createDocumentReference('', 'MoccaCalendar', 'MoccaCalendarClass'))
#if (!$services.licensing.licensor.hasLicensureForEntity($mainReference))
  {{error}}#getMissingLicenseMessage('moccacalendar.extension.name'){{/error}}
#else
#if($xcontext.action=='view'){{html clean="false" wiki="false"}}
#if($canCreateEvents)
## create event link
&lt;div class="calendar-buttons"&gt;
&lt;span class="buttonwrapper"&gt;
&lt;button class="btn btn-success" id="calendar${calcounter}-btn"&gt;&lt;span class="glyphicon glyphicon-plus"&gt;&lt;/span&gt; $escapetool.html($services.localization.render('MoccaCalendar.calendarevent.create'))&lt;/button&gt;
&lt;/span&gt;
&lt;/div&gt;
## end create event link
#end
&lt;div id="calendar${calcounter}"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
require(['jquery', 'moccaCalendar'], function(jQuery) {
 jQuery(document).ready(function() {
  var defaultView = XWiki.MoccaCalendar.Helper.getCalendarView("$!escapetool.javascript($defaultView)");

  var defaultEventData = {
    xpage: 'plain',
    outputSyntax: 'plain',
    calendarDoc: "$!escapetool.javascript($calendarDoc)",
    filter: "$!escapetool.javascript($filter)",
    classname: "MoccaCalendar.MoccaCalendarEventClass",
    startfield: "startDate",
    endfield: "endDate",
    durationfield: ""
  };

  // page is now ready, initialize the calendar...
  var calendar = jQuery('#calendar${calcounter}').fullCalendar({
    events: {
      url : "$!escapetool.javascript($jsonUrl)",
      type: 'GET',
      data : function() {
        // as we also get called before the calendar is fully initialized
        // we cannot get the current view reliably from the calendar itself
        // instead use our trusty helper 
        return jQuery.extend(defaultEventData, {'outputView': XWiki.MoccaCalendar.Helper.getCalendarView(defaultView)} );
      },
      error: function() {
        calendarHelper.displayError();        
      },
    },
    eventClick: function(calEvent, jsEvent, view) {
      new XWiki.MoccaCalendar.MoccaCalendarPopup({editMode: false, event: calEvent}, calendarHelper);
      jsEvent.preventDefault();
      return false;
    },
    viewRender: function(view, element) {
      XWiki.MoccaCalendar.Helper.setCalendarView(view.name);
    },
    header: {
      left: "$!escapetool.javascript($left)",
      center: "$!escapetool.javascript($center)",
      right: "$!escapetool.javascript($right)"
    },
    defaultView: defaultView,
#if($year!="")    year: $!escapetool.javascript($year),#end
#if($month!="")   month: $!escapetool.javascript($month), #end
#if($date!="")    date: $!escapetool.javascript($date), #end
    firstDay: $escapetool.javascript($firstDay),
#if($minTime!="")    minTime: "$!escapetool.javascript($minTime)", #end
#if($maxTime!="")    maxTime: "$!escapetool.javascript($maxTime)", #end
    editable: #if($canCreateEvents) true #else false#end ,
    selectable: #if($canCreateEvents) true #else false#end ,
    selectHelper: true,
    select: function(start, end, jsEvent, view) {
      calendarHelper.showCreateEventFrom(start, end);
      calendar.fullCalendar('unselect');
    },
    eventDrop: function(event, delta, revertFunc, jsEvent, ui, view) {
      calendarHelper.updateEvent(event.id, false, delta, event.start, event.end, revertFunc);
    },
    eventResize: function(event, delta, revertFunc, jsEvent, ui, view) {
      calendarHelper.updateEvent(event.id, true, delta, event.start, event.end, revertFunc);
    },
    aspectRatio:1.8,
    monthNames: $services.localization.render('xwiki.calendar.monthNames'),
    monthNamesShort: $services.localization.render('xwiki.calendar.monthNamesShort'),
    dayNames: $services.localization.render('xwiki.calendar.dayNames'),
    dayNamesShort: $services.localization.render('xwiki.calendar.dayNamesShort'),
    allDayText: "$escapetool.javascript($services.localization.render('xwiki.calendar.allDayText'))",
    axisFormat: "$escapetool.javascript($services.localization.render('xwiki.calendar.axisFormat'))",
    timeFormat: "$dateFormat.substring($dateFormat.indexOf('H'))",
    views: {
      month : {
        columnFormat: "$!services.localization.render('xwiki.calendar.columnFormat.month')",
        titleFormat: "$!services.localization.render('xwiki.calendar.titleFormat.month')",
        buttonText: "$!services.localization.render('xwiki.calendar.button.month')"
      },
      week : {
        columnFormat: "$!services.localization.render('xwiki.calendar.columnFormat.week')",
        titleFormat: "$!services.localization.render('xwiki.calendar.titleFormat.week')",
        buttonText: "$!services.localization.render('xwiki.calendar.button.week')"
      },
      day : {
        columnFormat: "$!services.localization.render('xwiki.calendar.columnFormat.day')",
        titleFormat: "$!services.localization.render('xwiki.calendar.titleFormat.day')",
        buttonText: "$!services.localization.render('xwiki.calendar.button.day')"
      },
      today: {
        buttonText: "$!services.localization.render('xwiki.calendar.button.today')"
      },
      plainList: {
        buttonText: "$!services.localization.render('xwiki.calendar.button.plainList')"
      }
    }
  });
  jQuery('#calendar${calcounter}-btn').click( function(e) { calendarHelper.showCreateEvent(); e.preventDefault(); });
  // helper to be used in callback above
#set($newPageParams = "template=MoccaCalendar.MoccaCalendarEventTemplate&amp;parentFROM=${escapetool.url($calendarDoc)}&amp;form_token=${services.csrf.getToken()}&amp;ocalcaction=create")
#set($randomDocUrl = $xwiki.getURL("randomPage${util.generateRandomString(10)}",'edit',$newPageParams))
#set($updateUrlParams="?xpage=plain&amp;outputSyntax=plain&amp;calendarDoc=${escapetool.url(${calendarDoc})}&amp;")
  var calendarHelper = new XWiki.MoccaCalendar.Helper(calendar, "$!escapetool.javascript($dateFormat)", "$escapetool.javascript($jsonUrl)", "$escapetool.javascript($randomDocUrl)", "$escapetool.javascript("${updateUrl}${updateUrlParams}")", "$escapetool.javascript($newPageParams)", "${escapetool.javascript($services.csrf.getToken())}");
  });
});
&lt;/script&gt;
#showDeleteEventsModal
{{/html}}
#else ## of #if($xcontext.action=='view')
Mocca Calendar Macro
#end
#end
{{/velocity}}</code>
    </property>
    <property>
      <contentDescription/>
    </property>
    <property>
      <contentType>No content</contentType>
    </property>
    <property>
      <defaultCategory>Content</defaultCategory>
    </property>
    <property>
      <description>Displays a Calendar</description>
    </property>
    <property>
      <id>moccacalendar</id>
    </property>
    <property>
      <name>Mocca Calendar</name>
    </property>
    <property>
      <supportsInlineMode>0</supportsInlineMode>
    </property>
    <property>
      <visibility>Current Wiki</visibility>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Macro</name>
    <number>0</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>2b173925-b2b6-496b-b18f-8a8092663b88</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue>page</defaultValue>
    </property>
    <property>
      <description>Possible values are 'wiki','space' or 'page', where:
 'page': only events which are children pages of this page will be included,
 'space': only events which are in the space of the calendar doc will be included,
 'wiki': all events will be included.</description>
    </property>
    <property>
      <mandatory/>
    </property>
    <property>
      <name>filter</name>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Macro</name>
    <number>1</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>47abb77b-820a-4406-aaba-618116667c32</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>The calendar document whose events are shown (only if filter is set to 'page'). This value is also used as the default calendar to create new events for. If missing, the current document is used.</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>calendarDoc</name>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Macro</name>
    <number>2</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>b87943f2-eeba-4d00-94e5-2ca115bb7332</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue>month</defaultValue>
    </property>
    <property>
      <description>The initial way the calendar is displayed; can be changed by the user. Possible values are: 'month', 'agendaWeek', 'agendaDay' or 'plainList'</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>defaultView</name>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Macro</name>
    <number>3</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>d07837c6-fa51-4eac-a1b0-a79aab60511e</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>First day (from 0 being Sunday to 6 being Monday) of the week to show in the calendar. Leave empty for Monday</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>firstDay</name>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Macro</name>
    <number>4</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>77d5c912-4d56-452d-a4f6-f4eabc42c52c</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue>8:00</defaultValue>
    </property>
    <property>
      <description>First time to show in the calendar. Users won't see hours before this time. Leave empty for default (8:00)</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>minTime</name>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Macro</name>
    <number>5</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>1bf587c1-14b2-4b51-b1f4-babbf1d13ecf</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue>23:00</defaultValue>
    </property>
    <property>
      <description>Last time to show in the calendar. Users won't see hours after this time. Leave empty for default (23:00)</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>maxTime</name>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Macro</name>
    <number>6</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>b6bb2e26-07c8-4b87-a628-e9f3d59faf0f</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Year of the date to show when loading the calendar. Leave empty for today</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>year</name>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Macro</name>
    <number>7</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>b42462f5-12d3-4775-a2e5-feccc98532ab</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Month (from 0 to 11) of the date to show when loading the calendar. Leave empty for today</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>month</name>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Macro</name>
    <number>8</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>3f0c549b-6617-4e17-965c-b9b7586dc47d</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Day (from 1 to 31) of the date to show when loading the calendar. Leave empty for today</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>date</name>
    </property>
  </object>
</xwikidoc>
