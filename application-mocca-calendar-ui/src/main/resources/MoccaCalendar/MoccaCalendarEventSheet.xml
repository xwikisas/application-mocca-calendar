<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="MoccaCalendar.MoccaCalendarEventSheet" locale="">
  <web>MoccaCalendar</web>
  <name>MoccaCalendarEventSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>MoccaCalendarEventClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
### this macro shows a validation error message if it exists
#macro(showvalidationmessage $message $force)
#if($xcontext.validationStatus.errors.contains($message) || "$!force" == "true") ##
&lt;span class="xErrorMsg"&gt;$escapetool.xml($services.localization.render($message))&lt;/span&gt;
#end ##
#end ## end showvalidationmessage
##
#macro(getDateFormat $field $allDay $format)
  #set($result = $!doc.getObject('MoccaCalendar.MoccaCalendarEventClass').getxWikiClass().get($field).getProperty('dateFormat').value)
  #if($!result == "")
    #set($result = $xwiki.getSpacePreference('dateformat', 'yyyy/MM/dd HH:mm'))
  #end
  #if($allDay)
    ## try to cut the time because this event has the all day flag
    #set($idx = $result.indexOf("H"))
    #if($idx &gt; 0)
      #set($result = $result.substring(0, $idx).trim())
    #end
  #end
  #set ($format = $NULL)
  #setVariable ("$format" $result)
#end
#macro(displayDate $field)
#if($xcontext.getAction()=="view" &amp;&amp; $doc.getValue('allDay')==1)
  #getDateFormat($field true $format)
  #set($formattedValue = $escapetool.xml($datetool.format($format, $doc.getValue($field))))
$!formattedValue
#else
$doc.display($field)
#end
#end
##
#set($isEdit = ($xcontext.action=='edit'))
#set($eventClass = 'MoccaCalendar.MoccaCalendarEventClass')
#set($eventValidationDoc = 'MoccaCalendar.Code.MoccaCalendarEventValidation')
#set($eventRecurrentClass = 'MoccaCalendar.Code.MoccaCalendarEventRecurrencyClass')
#set ($discard = $xwiki.ssx.use('MoccaCalendar.Code.Macro'))
#set($discard=$xwiki.jsx.use("MoccaCalendar.Code.DatePickerExtension", {'defer': false}))
#if($isEdit)
  #set($discard=$xwiki.jsx.use("MoccaCalendar.Code.MoccaCalendarEventModificationClass", {'defer': false, 'minify': false}))
#end
#set($calendar = $parentDoc.getObject('MoccaCalendar.MoccaCalendarClass'))
#if($calendar)
  #set($calendarDoc = $parentDoc)
#end
#if(!$calendar &amp;&amp; "$!request.getParameter('parentFROM')" != "")
  #set($calendarDoc = $xwiki.getDocument($request.getParameter('parentFROM')))
  #set($calendar = $calendarDoc.getObject('MoccaCalendar.MoccaCalendarClass'))
#end
#set($backToCalendarDoc = $xwiki.getDocument($request.getParameter('calendarDoc')))
#if(!$!backToCalendarDoc || $backToCalendarDoc.isNew())
  #set($backToCalendarDoc = $calendarDoc)
#end
#set($discard = $doc.use($eventClass))
#set($isRecurrent = ($doc.getValue('recurrent') == 1))
#set($instanceStartStr = "$!{request.get('instanceStart')}")
#if($isRecurrent &amp;&amp; "$instanceStartStr" != "")
  #set($instanceStart = $datetool.toDate("yyyy-MM-dd'T'HH:mm", $instanceStartStr))
#end
#if($isEdit)
  #set($isSingleInstance = false)
  #set($editPrefix = 'MoccaCalendar.MoccaCalendarEventClass_0')
  #set($modifiedEventObjectIsNew = true)
  #if($isRecurrent)
    #set($isSingleInstance = ("$!instanceStart" != ""))
    #if($isSingleInstance)
      #set($modifiedEventObjIndex = $services.moccacalendar.getModifiedEventObjectIndex($doc, $instanceStart))
      #if($modifiedEventObjIndex != -1)
        #set($modifiedEventObjectIsNew = false)
      #end
    #end
  #end
  #if($request.xpage=="plain")
    ## we are in modal dialog edit view - no separate parent page widget
    #set($parentParamName="parent")
  #else
    #set($discard=$xwiki.jsx.use("MoccaCalendar.MoccaCalendarEventSheet"))
    #set($parentParamName="_parent")
  #end
#end
{{/velocity}}{{velocity}}{{html wiki="true" clean="false"}}
#template('display_macros.vm')##
#if($request.disabled != "disabled")
  (% class="xform" %)
  (((
  ##
  ## display generic (not field specific) messages
  ##
  #if($xcontext.validationStatus.hasExceptions())
    {{error}}
      $services.localization.render('MoccaCalendar.generic.errormessage')
      #foreach($exception in $xcontext.validationStatus.getExceptions())
      * {{{$exception.localizedMessage}}}
      #end
    {{/error}}
  #end
  #if($isEdit)
  #initRequiredSkinExtensions()
  ##
  ## add the groovy script to the validation (the xvalidation parameter in the request also works to set the groovy script validation)
  ##
  &lt;input type="hidden" name="xvalidate" value="1" /&gt;
  &lt;input type="hidden" name="xvalidation" value="$eventValidationDoc" /&gt;
  ##
  ## the following values must be added explicitly in "plain edit view", as used by the modal popup
  ## because the "plain view" does not give them to us
  ##
  #if($request.xpage=='plain')
  &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
  &lt;input type="hidden" name="language" value="$!{escapetool.xml($tdoc.realLocale)}" /&gt;
  #end
  ##
  ## add a switch between general and specifc values in case of overrides
  ##
  #if($isSingleInstance)
  #set($allEdit = "$!{request.getParameter('instanceEdit')}" == "no")
    ; &lt;label for="instanceEdit" id="instanceEditSwitch"&gt;$services.localization.render('moccacalendarevent.editswitch.label')&lt;/label&gt;
    : &lt;input type="radio" name="instanceEdit" id="instanceEditYes" value="yes" #if(!$allEdit) checked="checked" #end /&gt;&lt;label for="instanceEditYes"&gt;$services.localization.render('moccacalendarevent.editswitch.oneInstance')&lt;/label&gt;
      &lt;input type="radio" name="instanceEdit" id="instanceEditNo" value="no" #if($allEdit) checked="checked" #end /&gt;&lt;label for="instanceEditNo"&gt;$services.localization.render('moccacalendarevent.editswitch.allInstances')&lt;/label&gt;

  &lt;div id="allEventsFields"&gt;

  #end

    ; &lt;label for="calendar"&gt;$escapetool.xml($services.localization.render('MoccaCalendar.calendar'))&lt;/label&gt;
    : &lt;select id="calendarParent" name="$parentParamName"&gt;
    #foreach($item in $services.moccacalendar.getAllCalendars()) ## TODO: add filter here, see MOCCACAL-76
      #set($itemdoc = $xwiki.getDocument($item))
      #if($!{itemdoc} &amp;&amp; ${itemdoc.hasAccessLevel("edit")})
        #set($selected="")
        #if($itemdoc.getId() == $calendarDoc.getId())
          #set($selected=" selected='selected'")
        #end
        &lt;option value="$escapetool.html($itemdoc.getFullName())"$selected&gt;$itemdoc.getDisplayTitle()&lt;/option&gt;
      #end
    #end
    &lt;/select&gt;

    ; &lt;label for="${editPrefix}_title"&gt;$escapetool.xml($doc.displayPrettyName('title', false, false))&lt;span class="xRequired"&gt;&lt;/span&gt;&lt;/label&gt;
    : $doc.display('title')#showvalidationmessage("val_title_already_exists") &lt;span class="val_title_notempty xErrorMsg" style="display:none;"&gt;$escapetool.xml($services.localization.render('val_title_notempty'))&lt;/span&gt; &lt;span class="val_title_notvalid xErrorMsg" style="display:none;"&gt;$escapetool.xml($services.localization.render('val_title_notvalid'))&lt;/span&gt;

    ; &lt;label for="${editPrefix}_startDate"&gt;$escapetool.xml($doc.displayPrettyName('startDate', false, false))&lt;span class="xRequired"&gt;&lt;/span&gt;&lt;/label&gt;
    : #displayDate('startDate')#showvalidationmessage("val_startDateMissing")#showvalidationmessage("val_startDateNotDate")
    ; &lt;label for="${editPrefix}_endDate"&gt;$escapetool.xml($doc.displayPrettyName('endDate', false, false))&lt;/label&gt;
    : #displayDate('endDate')#showvalidationmessage("val_endDate")#showvalidationmessage("val_endDateNotDate")

    ; &lt;label for="${editPrefix}_allDay"&gt;$escapetool.xml($doc.displayPrettyName('allDay', false, false))&lt;/label&gt;
    : $doc.display('allDay')
    ; &lt;label for="${editPrefix}_description"&gt;$escapetool.xml($doc.displayPrettyName('description', false, false))&lt;/label&gt;
    : $doc.display('description')
    ; &lt;label for="${editPrefix}_backgroundColor"&gt;$escapetool.xml($doc.displayPrettyName('backgroundColor', false, false))&lt;/label&gt;
    #set ($colorPickerParams = {
      'id': "${editPrefix}_backgroundColor",
      'name': "${editPrefix}_backgroundColor",
      'value': $escapetool.xml($doc.getValue('backgroundColor'))
    })
    : #colorPicker($colorPickerParams)
    ; &lt;label for="${editPrefix}_textColor"&gt;$escapetool.xml($doc.displayPrettyName('textColor', false, false))&lt;/label&gt;
    #set ($colorPickerParams = {
      'id': "${editPrefix}_textColor",
      'name': "${editPrefix}_textColor",
      'value': $escapetool.xml($doc.getValue('textColor'))
    })
    : #colorPicker($colorPickerParams)
    ; &lt;label for="${editPrefix}_recurrent"&gt;$escapetool.xml($doc.displayPrettyName('recurrent', false, false))&lt;/label&gt;
  #if(!$doc.isNew())
    : $doc.display('recurrent','view') #if($isEdit) $doc.display('recurrent','hidden') #end
  #else
    : $doc.display('recurrent')
  #end
  #if($doc.isNew() || $isRecurrent)
  #set($discard = $doc.use($eventRecurrentClass)) ##
  (% id="recurrentFields" #if(!$isRecurrent)style="display:none" #{end}%)
  (((
    ; &lt;label for="${eventRecurrentClass}_0_frequency"&gt;$escapetool.xml($doc.displayPrettyName('frequency', false, false))&lt;/label&gt;
    : $doc.display('frequency')
    ; &lt;label for="${eventRecurrentClass}_0_firstInstance"&gt;$escapetool.xml($doc.displayPrettyName('firstInstance', false, false))&lt;/label&gt;
    : $doc.display('firstInstance')#showvalidationmessage("moccacalendar.updates.firstInstance.notDate")

    ; &lt;label for="${eventRecurrentClass}_0_lastInstance"&gt;$escapetool.xml($doc.displayPrettyName('lastInstance', false, false))&lt;/label&gt;
    : $doc.display('lastInstance')#showvalidationmessage("moccacalendar.updates.lastInstance.notDate")
  )))
  #end
  #if($isSingleInstance)
  &lt;/div&gt;
  #if($modifiedEventObjectIsNew)
    #set($dummyObj = $services.moccacalendar.createModificationDummy($doc, $instanceStart))
    #set($discard = $doc.use($dummyObj))
    #set($dummyObjIndex = $dummyObj.getNumber())
    ##set($discard = $doc.use('MoccaCalendar.Code.MoccaCalendarEventModificationClass', $dummyObjIndex))
    #set($editOnePrefix = "MoccaCalendar.Code.MoccaCalendarEventModificationClass_$dummyObjIndex")
  #else
    #set($discard = $doc.use('MoccaCalendar.Code.MoccaCalendarEventModificationClass', $modifiedEventObjIndex))
    #set($editOnePrefix = "MoccaCalendar.Code.MoccaCalendarEventModificationClass_${modifiedEventObjIndex}")
  #end

  #set($dateFormat = $!xwiki.getClass('MoccaCalendar.Code.MoccaCalendarEventModificationClass').get('startDate').getProperty('dateFormat').value)
  #if("$!dateFormat" == "")
    ## If the date format set from the current xwiki is not set, a default value will be provided.
    #set($dateFormat = $xwiki.getXWikiPreference('dateformat', 'yyyy/MM/dd HH:mm'))
  #end

  &lt;div id="oneEventFields" data-original-format="$dateFormat"&gt;

    ; &lt;label for="${editOnePrefix}_title"&gt;$escapetool.xml($doc.displayPrettyName('title', false, false))&lt;span class="xRequired"&gt;&lt;/span&gt;&lt;/label&gt;
    : $doc.display('title')
    ; &lt;label for="${editOnePrefix}_startDate"&gt;$escapetool.xml($doc.displayPrettyName('startDate', false, false))&lt;span class="xRequired"&gt;&lt;/span&gt;&lt;/label&gt;
    : #displayDate('startDate')#showvalidationmessage("MoccaCalendar.Code.MoccaCalendarEventModificationClass.validation.startDateMissing")#showvalidationmessage("MoccaCalendar.Code.MoccaCalendarEventModificationClass.validation.startDateNotDate")
    ; &lt;label for="${editOnePrefix}_endDate"&gt;$escapetool.xml($doc.displayPrettyName('endDate', false, false))&lt;/label&gt;
    : #displayDate('endDate')#showvalidationmessage("MoccaCalendar.Code.MoccaCalendarEventModificationClass.validation.endDateBeforeStartDate")#showvalidationmessage("MoccaCalendar.Code.MoccaCalendarEventModificationClass.validation.endDateNotDate")
    ; &lt;label for="${editOnePrefix}_description"&gt;$escapetool.xml($doc.displayPrettyName('description', false, false))&lt;/label&gt;
    : $doc.display('description')
    ; &lt;label for="${editOnePrefix}_backgroundColor"&gt;$escapetool.xml($doc.displayPrettyName('backgroundColor', false, false))&lt;/label&gt;
    #set ($colorPickerParams = {
      'id': "${editOnePrefix}_backgroundColor",
      'name': "${editOnePrefix}_backgroundColor",
      'value': $escapetool.xml($doc.getValue('backgroundColor'))
    })
    : #colorPicker($colorPickerParams)
    ; &lt;label for="${editOnePrefix}_textColor"&gt;$escapetool.xml($doc.displayPrettyName('textColor', false, false))&lt;/label&gt;
    #set ($colorPickerParams = {
      'id': "${editOnePrefix}_textColor",
      'name': "${editOnePrefix}_textColor",
      'value': $escapetool.xml($doc.getValue('textColor'))
    })
    : #colorPicker($colorPickerParams)
    &lt;input type="hidden" name="classname" value="MoccaCalendar.Code.MoccaCalendarEventModificationClass" /&gt;
    &lt;input type="hidden" id="modificationIsNew" name="modificationIsNew" value="$modifiedEventObjectIsNew" /&gt;
    &lt;input type="hidden" id="eventOrigStartDate" name="${editOnePrefix}_eventOrigStartDate" value="$escapetool.html($instanceStartStr)" /&gt;
    &lt;input type="hidden" name="eventDoc"  value="$escapetool.html($services.model.serialize($doc.getDocumentReference(),'default'))" /&gt;
  &lt;/div&gt;
  #end ## if isSingleInstance

    ##
    ## Load required js/css for colorPicker when included/modal in another page.
    ##
    #getRequiredSkinExtensions($requiredSkinExtensions)
    #set ($discard = $response.setHeader('X-XWIKI-HTML-HEAD', $requiredSkinExtensions))

  #else ## if !isEdit
  ## the "view" code: very crude, to be polished quite a bit later
  ## also use helper to insert values from modifications, if present
  #set($eventInstance = $services.moccacalendar.getEventInstance($doc, $instanceStart))
  #if($eventInstance)
    #if($calendar)
    ; &lt;label for="calendar"&gt;$escapetool.xml($services.localization.render('MoccaCalendar.calendar'))&lt;/label&gt;
    : [[$calendarDoc.getDisplayTitle()&gt;&gt;$calendarDoc.fullName]]
    #end
    ; &lt;label&gt;$escapetool.xml($doc.displayPrettyName('title', false, false))&lt;/label&gt;
    : $eventInstance.getTitle()
    ; &lt;label for="startDate"&gt;$escapetool.xml($doc.displayPrettyName('startDate', false, false))&lt;/label&gt;
    : #getDateFormat('startDate' $eventInstance.isAllDay() $format) $xwiki.jodatime.getDateTimeFormatterForPattern($format).print($eventInstance.getStartDate())
    ; &lt;label for="endDate"&gt;$escapetool.xml($doc.displayPrettyName('endDate', false, false))&lt;/label&gt;
    : #getDateFormat('endDate' $eventInstance.isAllDay() $format) $xwiki.jodatime.getDateTimeFormatterForPattern($format).print($eventInstance.getEndDate())
    ; &lt;label for="allDay"&gt;$escapetool.xml($doc.displayPrettyName('allDay', false, false))&lt;/label&gt;
    ## XXX allDay cannot be modified yet, but we will need a localized string representation in the eventInstance for this if we make if modifiable!
    : $doc.display('allDay')
    ; &lt;label for="description"&gt;$escapetool.xml($doc.displayPrettyName('description', false, false))&lt;/label&gt;
    : $eventInstance.getDescriptionHtml()
    ; &lt;label for="backgroundColor"&gt;$escapetool.xml($doc.displayPrettyName('backgroundColor', false, false))&lt;/label&gt;
    #set ($backgroundColor = $eventInstance.getBackgroundColor())
    #set ($isCalendarDefault = (($backgroundColor == $calendarDoc.getValue('color')) &amp;&amp; ($doc.getValue('backgroundColor') == '')) )
    : &lt;div class="moccaevent" style="border-color:${escapetool.html($backgroundColor)}"&gt;
        &amp;#160;
        #if($isCalendarDefault)
          ($escapetool.xml($services.localization.render('MoccaCalendar.calendarevent.color.defaultValue')))
        #end
      &lt;/div&gt;
    ; &lt;label for="textColor"&gt;$escapetool.xml($doc.displayPrettyName('textColor', false, false))&lt;/label&gt;
    #set ($textColor = $eventInstance.getTextColor())
    #set ($isCalendarDefault = (($textColor == $calendarDoc.getValue('textColor')) &amp;&amp; ($doc.getValue('textColor') == '')) )
    : &lt;div class="moccaevent" style="border-color:${escapetool.html($textColor)}"&gt;
        &amp;#160;
        #if($isCalendarDefault)
          ($escapetool.xml($services.localization.render('MoccaCalendar.calendarevent.color.defaultValue')))
        #end
      &lt;/div&gt;
    ; &lt;label for="recurrent"&gt;$escapetool.xml($doc.displayPrettyName('recurrent', false, false))&lt;/label&gt;
    ## XXX same as allDay, we might need a localized string representation in the eventInstance
    : $doc.display('recurrent')
  #else
  ## This branch is only reached by events from iCals and gCals. The "xwiki false" setting is necessary because we
  ## don't have control over the data from other providers. If the wiki syntax is set to true, the data might be
  ## interpreted in a strange way and break the display.
  {{html xwiki='false'}}
    #if($!{request.readOnly} != "true")
      $escapetool.xml($services.localization.render('MoccaCalendar.calendar.noevent'))
    #else
    &lt;dl&gt;
      &lt;dt&gt;&lt;label&gt;$escapetool.xml($services.localization.render('MoccaCalendar.MoccaCalendarEventClass_title'))&lt;/label&gt;
      &lt;/dt&gt;
      &lt;dd&gt;$request.title&lt;/dd&gt;
      &lt;dt&gt;&lt;label
            for="startDate"&gt;$escapetool.xml($services.localization.render('MoccaCalendar.MoccaCalendarEventClass_startDate'))&lt;/label&gt;
      &lt;/dt&gt;
      &lt;dd&gt;$request.start&lt;/dd&gt;
      &lt;dt&gt;&lt;label
            for="endDate"&gt;$escapetool.xml($services.localization.render('MoccaCalendar.MoccaCalendarEventClass_endDate'))&lt;/label&gt;
      &lt;/dt&gt;
      &lt;dd&gt;$request.end&lt;/dd&gt;
      &lt;dt&gt;&lt;label
            for="allDay"&gt;$escapetool.xml($services.localization.render('MoccaCalendar.MoccaCalendarEventClass_allDay'))&lt;/label&gt;
      &lt;/dt&gt;
      &lt;dd&gt;$request.allDay&lt;/dd&gt;
      &lt;dt&gt;&lt;label for="description"&gt;$escapetool.xml($services.localization.render('description'))&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        $request.description
      &lt;/dd&gt;
    &lt;/dl&gt;
    #end
  {{/html}}
  #end
  #end ## if isEdit else part

  #if($!{request.xpage}!="plain")
  ----
  #if($backToCalendarDoc)
  [[$services.localization.render('MoccaCalendar.calendarevent.backlink', [ $backToCalendarDoc.getDisplayTitle()])&gt;&gt;$backToCalendarDoc]]
  #end
  #end
  )))
#else
  &lt;span&gt;$services.localization.render('MoccaCalendar.calendar.readonly')&lt;/span&gt;
#end
{{/html}}
## please do not add linebreaks here, or the "save"-button will jump if there are validation errors
#if($xcontext.validationStatus.errors &amp;&amp; $xcontext.validationStatus.errors.size()&gt;0)$response.setStatus(400)#{end}#if($xcontext.validationStatus.hasExceptions())$response.setStatus(500)#{end}
{{/velocity}}</content>
  <object>
    <name>MoccaCalendar.MoccaCalendarEventSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>8341ad2a-8410-4cad-9ad3-15fc96efeb8b</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe("xwiki:dom:loaded", function() {

  var attachEvents = function() {
    var cp = $('calendarParent');
    if (cp) cp.observe("change", function() {
      $('xwikidocparentinput').setValue( $F('calendarParent'));
      Event.fire($('xwikidocparentinput'), 'xwiki:suggest:selected');
    })
    var rc = $('MoccaCalendar.MoccaCalendarEventClass_0_recurrent');
    var recurrencyArea = $('recurrentFields')
    var recurrencyField = $('MoccaCalendar.Code.MoccaCalendarEventRecurrencyClass_0_frequency')
    if (rc) {
      rc.observe('change', function() {
        var value = $F('MoccaCalendar.MoccaCalendarEventClass_0_recurrent');
        if (value) {
          if (recurrencyArea) recurrencyArea.show()
        } else {
          if (recurrencyArea) recurrencyArea.hide()
        }
      })
    } else {
      if(recurrencyField) recurrencyField.writeAttribute('disabled','disabled')
    }
  }

  document.observe('xwiki:moccacalendar:editloaded', attachEvents)
  attachEvents()
});</code>
    </property>
    <property>
      <name>Edit Parent</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
