<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="MoccaCalendar.Code.MoccaCalendarEventValidation" locale="">
  <web>MoccaCalendar.Code</web>
  <name>MoccaCalendarEventValidation</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>MoccaCalendar.MoccaCalendarEventClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>MoccaCalendarEventValidation</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>plain/1.0</syntaxId>
  <hidden>true</hidden>
  <content>import com.xpn.xwiki.validation.*;

import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.objects.BaseObject;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.web.XWikiRequest;

import java.text.SimpleDateFormat;
import java.text.ParseException;

public class Val implements XWikiValidationInterface  {
	private static final String MoccaCalendarEventClass = "MoccaCalendar.MoccaCalendarEventClass";
	private static final String MoccaCalendarRecurrencyClass = "MoccaCalendar.Code.MoccaCalendarEventRecurrencyClass";
  
	private boolean parseDateTime(String dateStr, SimpleDateFormat dateTimeFormatter, SimpleDateFormat dateOnlyFormatter, String propName, String errorKey, XWikiContext context, BaseObject obj) {
			boolean valid = true;
			if (dateStr != null &amp;&amp; "" != dateStr.trim()) {
				Date parsedDate = null;
				try {
					parsedDate = dateTimeFormatter.parse(dateStr);
				} catch (ParseException e1) {
					try {
						parsedDate = dateOnlyFormatter.parse(dateStr);
					} catch (ParseException e2) {
						valid = false;
						XWikiValidationStatus.addErrorToContext(MoccaCalendarEventClass, propName, obj.get(propName).getPrettyName(), errorKey, context);
					}
				}
				if (parsedDate != null) {
					obj.setDateValue(propName, parsedDate);
				}
			}
			return valid;
	}

	public boolean validateDocument(XWikiDocument doc, XWikiContext context) {
		try {
			
			def classDocumentReference = doc.resolveClassReference(MoccaCalendarEventClass);
		
			final BaseObject obj = doc.getXObject(classDocumentReference, 0);
			if (obj == null) {
				return true;
			}
			boolean valid = true;

			// see MOCCACAL-106 and MOCCACAL-108
			// there seems  to be no good way to make the time part optional when parsing dates
			// so instead we reparse the values from the request manually instead
			XWikiRequest request = context.getRequest();

			def dateFormat = obj.getXClass(context).get("startDate").getDateFormat();
			SimpleDateFormat dateFormatter = new SimpleDateFormat(dateFormat);

			// to make the time part optional we use the following hack:
			// this assumes the hours/minutes are given in a format like "some H, then maybe punctuation, then the m"
			def dateFormatWithoutTime = dateFormat.replaceAll("\\p{Space}*H+\\p{Punct}*m+(\\p{Punct}*s+)?\\p{Space}*","");
			SimpleDateFormat dateOnlyFormatter = new SimpleDateFormat(dateFormatWithoutTime);


			def startDateValueStr = request.getParameter(MoccaCalendarEventClass+"_0_startDate");
			valid = parseDateTime(startDateValueStr, dateFormatter, dateOnlyFormatter, "startDate", "val_startDateNotDate", context, obj) &amp;&amp; valid;

			def endDateValueStr = request.getParameter(MoccaCalendarEventClass+"_0_endDate");
			if (!parseDateTime(endDateValueStr, dateFormatter, dateOnlyFormatter, "endDate", "val_endDateNotDate", context, obj)) {
				valid = false;
				obj.setDateValue("endDate", null);
			}

			if (valid) {
				Date startDate = obj.getDateValue("startDate");
				Date endDate = obj.getDateValue("endDate");
				String title = obj.getStringValue("title");
				if(startDate == null) {
					obj.setDateValue("startDate",new Date());
					startDate=obj.getDateValue("startDate");
				}
		
				if(endDate!=null &amp;&amp; startDate !=null) {
					if(endDate.getTime()&lt;startDate.getTime()) {
						valid = false;
						XWikiValidationStatus.addErrorToContext(MoccaCalendarEventClass, "endDate", "End Date", "val_endDate", context);
					}
				}
			}
			
			String action = request.getParameter("ocalcaction");
			if("create".equals(action)) {
				if(!doc.isNew()) {
					valid = false;
					XWikiValidationStatus.addErrorToContext(MoccaCalendarEventClass, "title", "Title", "val_title_already_exists", context);
				}
			}

			def recurrencyClassDocumentReference = doc.resolveClassReference(MoccaCalendarRecurrencyClass);

			BaseObject recObj = doc.getXObject(recurrencyClassDocumentReference, 0);
			if (recObj != null) {

				valid = parseDateTime(request.getParameter(MoccaCalendarRecurrencyClass+"_0_firstInstance"), dateFormatter, dateOnlyFormatter, "firstInstance", "moccacalendar.updates.firstInstance.notDate", context, recObj) &amp;&amp; valid;
				valid = parseDateTime(request.getParameter(MoccaCalendarRecurrencyClass+"_0_lastInstance"), dateFormatter, dateOnlyFormatter, "lastInstance", "moccacalendar.updates.lastInstance.notDate", context, recObj) &amp;&amp; valid;
			}


			return valid;
		} catch(Exception e) {
			XWikiValidationStatus.getValidationStatus(context).addExceptionToContext(MoccaCalendarEventClass, "dummy", e, context);
			return false;
		}
	}

	public boolean validateObject(BaseObject object, XWikiContext context) {
		return true;
	}

}</content>
</xwikidoc>
