<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="MoccaCalendar.Code.MoccaCalendarEventModificationClass" locale="">
  <web>MoccaCalendar.Code</web>
  <name>MoccaCalendarEventModificationClass</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>MoccaCalendar.Code.DateCheckService</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>MoccaCalendarEventModificationClass</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>\\</content>
  <class>
    <name>MoccaCalendar.Code.MoccaCalendarEventModificationClass</name>
    <customClass/>
    <customMapping/>
    <defaultViewSheet/>
    <defaultEditSheet/>
    <defaultWeb/>
    <nameField/>
    <validationScript/>
    <description>
      <contenttype>---</contenttype>
      <customDisplay/>
      <disabled>0</disabled>
      <editor>Text</editor>
      <name>description</name>
      <number>6</number>
      <picker>0</picker>
      <prettyName>description</prettyName>
      <rows>5</rows>
      <size>40</size>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
    </description>
    <endDate>
      <customDisplay/>
      <dateFormat>yyyy/MM/dd HH:mm</dateFormat>
      <disabled>0</disabled>
      <emptyIsToday>0</emptyIsToday>
      <name>endDate</name>
      <number>3</number>
      <picker>1</picker>
      <prettyName>endDate</prettyName>
      <size>20</size>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.DateClass</classType>
    </endDate>
    <eventOrigStartDate>
      <customDisplay/>
      <dateFormat>yyyy-MM-dd'T'HH:mm</dateFormat>
      <disabled>0</disabled>
      <emptyIsToday>0</emptyIsToday>
      <name>eventOrigStartDate</name>
      <number>1</number>
      <picker>1</picker>
      <prettyName>Start date of a modified event instance</prettyName>
      <size>10</size>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.DateClass</classType>
    </eventOrigStartDate>
    <startDate>
      <customDisplay/>
      <dateFormat>yyyy/MM/dd HH:mm</dateFormat>
      <disabled>0</disabled>
      <emptyIsToday>0</emptyIsToday>
      <name>startDate</name>
      <number>2</number>
      <picker>1</picker>
      <prettyName>startDate</prettyName>
      <size>20</size>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.DateClass</classType>
    </startDate>
    <title>
      <customDisplay/>
      <disabled>0</disabled>
      <name>title</name>
      <number>5</number>
      <picker>0</picker>
      <prettyName>title</prettyName>
      <size>30</size>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
    </title>
  </class>
  <object>
    <name>MoccaCalendar.Code.MoccaCalendarEventModificationClass</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>44454d4b-a0be-43c2-8cb2-a44c913438da</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['moment'], function(moment) {

  function disable(element) { element.setAttribute('disabled','disabled') }
  function enable(element) { element.removeAttribute('disabled') }

  function setOriginalDateFormat() {
    const endDateInput = document.querySelector('input[id^="MoccaCalendar\\.Code\\.MoccaCalendarEventModificationClass_"][id$="_endDate"]');
    const startDateInput = document.querySelector('input[id^="MoccaCalendar\\.Code\\.MoccaCalendarEventModificationClass_"][id$="_startDate"]');
    const originalFormat = document.getElementById('oneEventFields').getAttribute('data-original-format');
    const momentFormat = moment().toMomentFormatString(originalFormat);

    if(endDateInput) {
      endDateInput.setAttribute('data-format', originalFormat);
      let endDate = moment(endDateInput.value);
      endDateInput.value = endDate.format(momentFormat);
    }
    if(startDateInput) {
      startDateInput.setAttribute('data-format', originalFormat);
      let startDate = moment(startDateInput.value);
      startDateInput.value = startDate.format(momentFormat);
    }
  }

  /* the save / save &amp; view / preview buttons actions must be patched
     as otherwise the save_action parameter value send with them adds some side effects */
  function onSaveClick(event) {
    var action = this.getAttribute('name')
    if (action == null) {
       action = this.getAttribute('id')
    }
    if (action == 'action_cancel' || action == 'cancel-moccacalendar-event') {
      return
    }
    event.stop()

    // If an event has the allDay flag checked, we must change the format of the dates back to the original
    // MoccaCalendarEventModificationClass date format, so that the corresponding object can be created or modified
    // correctly.
    if ($('MoccaCalendar.MoccaCalendarEventClass_0_allDay').checked) {
      setOriginalDateFormat();
    }
    if (action == 'action_save' || action == 'action_saveandcontinue' || action == 'save-moccacalendar-event') {
      new Ajax.Request(
         new XWiki.Document( new XWiki.DocumentReference('', ['MoccaCalendar','Code'], 'EventModificationService')).getURL('get'),
         {
           method: 'post',
           parameters: $('mocca-event-edit-form').serialize({submit:false}),
           onSuccess: function(response) {
              if (action == 'action_save') {
                new XWiki.widgets.Notification( "saved", "done");
                var viewUrl =  docviewurl + '?instanceStart=' + encodeURIComponent($('eventOrigStartDate').getAttribute('value'))
                window.location.href = viewUrl;
              } else if (action == 'save-moccacalendar-event') {
                document.fire('xwiki:moccacalendar:instancesaved')
              } else {
                // we reload the page to get the edit form values right in case we added a new modification
                // otherwise on a new modification we would add a new object on every "save" 
                window.location.href = window.location.href
              }
           },
           onFailure: function(response) {
                new XWiki.widgets.Notification("internal server error", "error");
           },
           onException: function(request, e) {
             console.log('while sending save request ', e);
           }
         }
      )
    } else if (action == 'action_preview') {
      alert('preview not implemented yet')
    }
  }

  function editOnlyThisInstance() {
    // here we tell the default handler in the main "Macro" code not to save
    // if we are in the edit dialog modal
    document.fire('xwiki:moccacalendar:editmode', {'oneInstance' : true})
    $$("#mocca-event-edit-form input#save-moccacalendar-event").each(function (e) { e.observe('click', onSaveClick) } )
    $('allEventsFields').hide()
    $$('#allEventsFields input').each(disable)
    $$('#allEventsFields textarea').each(disable)
    $$('input[name=language]').each(disable)
    $$('#oneEventFields textarea').each(enable)
    $$('#oneEventFields input').each(enable)
    $('oneEventFields').show()
  }

  function editAllInstances() {
    document.fire('xwiki:moccacalendar:editmode', {'oneInstance' : false})
    $$("#mocca-event-edit-form input#save-moccacalendar-event").each(function (e) { e.stopObserving('click', onSaveClick) } )
    $('oneEventFields').hide()
    $$('#oneEventFields input').each(disable)
    $$('#oneEventFields textarea').each(disable)
    $$('input[name=language]').each(enable)
    $$('#allEventsFields textarea').each(enable)
    $$('#allEventsFields input').each(enable)
    $('allEventsFields').show()
  }

  function onEventModificationChange() {
    if (this.getAttribute('id') == 'instanceEditYes') {
        editOnlyThisInstance()
    } else if (this.getAttribute('id') == 'instanceEditNo') {
        editAllInstances()
    } else {
       console.log("unknown change on event edit switch", this)
    }
  }

  function hookEventEditSwitch(event) {
    if (document.getElementById('instanceEditSwitch')) {
        $$('form [name="instanceEdit"]').each(function(elem) {
          $(elem).observe('change', onEventModificationChange);
          if (elem.getAttribute('checked')) {
             onEventModificationChange.bind(elem)();
          }
        });
        if ($('modificationIsNew').getAttribute('value')=='true') {
          var removeIndex = function(elem) {
            elem.setAttribute('name', elem.getAttribute('name').replace(/_-[0-9]+_/, '_'))
          }
          $$('form #oneEventFields input').each(removeIndex)
          $$('form #oneEventFields textarea').each(removeIndex)
        }
    }
  }

  document.observe('xwiki:moccacalendar:editloaded', hookEventEditSwitch);
  (XWiki &amp;&amp; XWiki.domIsLoaded &amp;&amp; hookEventEditSwitch()) || document.observe("xwiki:dom:loaded", hookEventEditSwitch);
});</code>
    </property>
    <property>
      <name>edit view modifications for events</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
