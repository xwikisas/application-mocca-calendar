<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="MoccaCalendar.Code.Macro" locale="">
  <web>MoccaCalendar.Code</web>
  <name>Macro</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>MoccaCalendar.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Calendar Macro</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>Example usage:

{{code}}

{{moccacalendar /}}

or

{{moccacalendar filter="space" /}}

or

{{moccacalendar filter="wiki" /}}
{{/code}}

{{moccacalendar filter="wiki"/}}
</content>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>e2b344c5-8dc6-4189-baf0-d786436d265d</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('moccaCalendar', ['jquery', 'fullcalendar', 'moment'], function(jQuery, fullCalendar, moment) {

// Make sure the XWiki 'namespace' and the ModalPopup class exist.
if (typeof(XWiki) == "undefined" || typeof(XWiki.widgets) == "undefined" || typeof(XWiki.widgets.ModalPopup) == "undefined") {
  if (typeof console != "undefined" &amp;&amp; typeof console.warn == "function") {
    console.warn("[MessageBox widget] Required class missing: XWiki.widgets.ModalPopup");
  }
} else {
  if (typeof(XWiki.MoccaCalendar) == "undefined") {
    XWiki.MoccaCalendar = {};
  }

#template('colorThemeInit.vm')

  XWiki.MoccaCalendar.Helper = Class.create({
  initialize: function(calendar, dateFormat, jsonServiceUrl, createEventBaseUrl, updateEventUrl, newPageNameUrl, dateCheckUrl, deleteEventInstanceUrl, newPageParams, formToken) {
    this.calendar = calendar;
    this.dateFormat = dateFormat;
    this.jsonServiceUrl = jsonServiceUrl;
    this.createEventBaseUrl = createEventBaseUrl;
    this.updateEventUrl = updateEventUrl;
    this.newPageNameUrl = newPageNameUrl;
    this.dateCheckUrl = dateCheckUrl;
    this.deleteEventInstanceUrl = deleteEventInstanceUrl;
    this.newPageParams = newPageParams;
    this.formToken = formToken;
    // hack: extract the "day only" and "time only" format, if possible
    // assumes time comes after the day
    var tSep = dateFormat.search(/[hk]/i)
    if (tSep != -1) {
      this.timeFormat = dateFormat.substring(tSep, dateFormat.length);
      this.dayFormat = dateFormat.substring(0, tSep-1);
    } else { // ??
      this.timeFormat = '';
      this.dayFormat = dateFormat;
    }
    document.addEventListener('calendarImportCompleted', () =&gt; {
      calendar.fullCalendar('refetchEvents');
    });
  },
  displayError: function(errorMessage) {
    if (!errorMessage) {
      errorMessage = "$escapetool.javascript($services.localization.render('MoccaCalendar.generic.errormessage'))";
    }
    if (this.errorNotification) {
       this.errorNotification.hide()
    }
    this.errorNotification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.failed'))" + errorMessage, "error");
  },
  showCreateEventFrom: function(start, end) {
    var allDay = !start.hasTime();
    var singleDay = (allDay &amp;&amp; end.diff(start,'days') &lt;= 1);

    var momentFormat = moment().toMomentFormatString(this.dateFormat);
    start = moment(start.local().toDate())
    end = moment(end.local().toDate())
    // see github issue #69: end date is exclusive to fullcalendar, but not for our UI
    if (allDay &amp;&amp; !singleDay) {
      end.subtract(1, 'd')
    }
    var startStr = start.format(momentFormat);
    var endStr = singleDay ? '' : end.format(momentFormat);
    var paramPrefix = "MoccaCalendar.MoccaCalendarEventClass_0_";
    var params = "&amp;" + paramPrefix + "startDate=" + encodeURIComponent(startStr);
    params += "&amp;" + paramPrefix + "endDate=" + encodeURIComponent(endStr);
    params += "&amp;" + paramPrefix + "allDay=" + allDay;
    return this.showCreateEvent(params);
  },
  showCreateEvent: function(extraParams) {
    var params = extraParams || '';
    return new XWiki.MoccaCalendar.MoccaCalendarPopup({pageURL: this.createEventBaseUrl + params}, this);
  },
  updateEvent: function(page, isResize, delta, startDate, endDate, revertFunc) {
    // FIXME: this only works "by accident" for meeting events, as they use the same fields for start/end date
    // see .UpdateService - that page needs to be updated
    var savingBox = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.inProgress'))", "inprogress", {inactive: true});
    var savedBox = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.done'))", "done", {inactive: true});
    var calendar = this.calendar;

    savingBox.show();
    savedBox.hide();

    // let's call the calendar update
    var params = "page=" +  encodeURIComponent(page) + "&amp;isResize=" + (isResize ? "1" : "0") + "&amp;delta=" + delta.asMilliseconds() + "&amp;startDate=" + startDate.format()
    if (endDate) { params += "&amp;endDate=" + endDate.format(); }
    params += "&amp;allDay=" + (startDate.hasTime()?"":"1");
    var url = this.updateEventUrl + params;
    jQuery.ajax(url).fail(function (data) {
      savingBox.hide();
      this.displayError();
      if (revertFunc) revertFunc();
    }.bind(this)).success(function (data) {
      if (data.success) {
        savingBox.hide();
        savedBox.show();
        calendar.fullCalendar('refetchEvents');
      } else {
        savingBox.hide();
        this.displayError(data.message);
        if (revertFunc) revertFunc();
      }
    }.bind(this));
  }
  });

  //
  // "static" helpers
  //
  XWiki.MoccaCalendar.Helper.getCalendarView = function(defaultVal) {
    var cookieName = 'MoccaCalendar_view=';
    if (document.cookie) {
      var ca = document.cookie.split(';');
      for(var i=0;i&lt;ca.length;i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1,c.length);
        if (c.indexOf(cookieName) == 0) return c.substring(cookieName.length,c.length);
      }
    }
    return defaultVal;
  };

  XWiki.MoccaCalendar.Helper.setCalendarView = function(value) {
    var cookieName = 'MoccaCalendar_view=';
    document.cookie = cookieName + value + "; path=/";
  };

  function removeColorPickers() {
    jQuery('#mocca-event-edit-form .color-picker').each(function(index) {
      jQuery('#' + jQuery(this).data('colpickId')).remove();
    });
  }
  
  //
  // the dialog to show / edit events
  //
  XWiki.MoccaCalendar.MoccaCalendarPopup = Class.create(XWiki.widgets.ModalPopup, {
    defaultInteractionParameters: {
      editMode : true
    },
    initialize: function($super, interactionParameters, helper) {
      this.interactionParameters = Object.extend(Object.clone(this.defaultInteractionParameters), interactionParameters || {});
      this.interactionParameters.isNew = (undefined === this.interactionParameters.event)
      this.helper = helper;
      this.saving = false;
      // call constructor from ModalPopup with params content, shortcuts, options
      $super(
        // this element will end up as 'this.content'
        new Element('form', {'class' : 'xform', 'id' : 'mocca-event-edit-form'}),
        {
          "show": {method: this.showDialog, keys: []},
          "close": {method: this.closeDialog, keys: ['Esc']}
        },
        {
          verticalPosition: "top",
          backgroundColor: "$theme.pageHeaderBackgroundColor",
          title : this.interactionParameters.editMode ? "$escapetool.javascript($services.localization.render('MoccaCalendar.calendarevent.create'))" : "$escapetool.javascript($services.localization.render('MoccaCalendar.calendarevent.view'))",
          removeOnClose : true,
          onClose : function() {
            removeColorPickers();
            document.stopObserving('xwiki:moccacalendar:editmode');
            document.stopObserving('xwiki:moccacalendar:instancesaved');
          }
        }
      );

      var that = this;
      document.observe('xwiki:moccacalendar:editloaded', function() {
            $$('input.datetime').each(function(dateTimeInput) {
              if (dateTimeInput.getAttribute('name') &amp;&amp; dateTimeInput.getAttribute('name').startsWith('MoccaCalendar.MoccaCalendarEventClass')) {
                dateTimeInput.observe('change', function(event) {
                  that.handleDatetimeFieldChange(event, $(this));
                });
              }
            });
            // newer implementation instead does:
            jQuery(this.content).off('change.datetime', 'input.datetime').on('change.datetime', 'input.datetime', function(event) {
              that.handleDatetimeFieldChange(event, $(this));
            });

            // this is the "all day" box
            that.allDay = $('MoccaCalendar.MoccaCalendarEventClass_0_allDay');
            that.allDay.observe('change', function(event) {
              that.handleAllDayFieldChange(event, $(this));
            });
            // use handler to init date picker, too
            that.handleAllDayFieldChange(null, that.allDay);
      });

      // only in case we are editing a recurrent event:
      // a flag and a handler for events from the MoccaCalendar.Code.MoccaCalendarEventModificationClass
      // signaling that we are switching between "one instance" and "all instances" of a recurrent event
      this.editModeIsSingleInstance = false;
      document.observe('xwiki:moccacalendar:editmode', function(event, element) {
        this.editModeIsSingleInstance = event.memo.oneInstance;
      }.bind(this));
      // in case of an "one instance" save the action happens in the MoccaCalendarEventModificationClass
      // and we only listen for the results to close the dialog
      document.observe('xwiki:moccacalendar:instancesaved', function(event) {
        this.savedBox.show();
        removeColorPickers();
        this.closeDialog();
        this.helper.calendar.fullCalendar('refetchEvents');
      }.bind(this));

      this.loadEventContent();
      this.showDialog();
      this.setClass("moccacal-modal-popup");

      this.savingBox = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.inProgress'))", "inprogress", {inactive: true});
      this.savedBox = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.done'))", "done", {inactive: true});
      this.savingBox.hide();
      this.savedBox.hide();
    },

    loadEditForm: function(event) {
      event.stop();
      this.interactionParameters.editMode = true;
      this.loadEventContent();
    },

    submitForm: function(event) {
      if (this.editModeIsSingleInstance) {
        // console.log('we are in single instance mode; skip saving the main form')
        // we trust the code for editing single instances of recurrent events to handle the save
        return;
      }

      event.stop();
      var titleField = this.content.down('[name="title"]');

      var title = $(titleField).getValue();
      title = title.replace(/^ +/,'').replace(/ +$/,'')
      if (title.length == 0) {
        $$(".val_title_notempty").each(Element.show);
        return false;
      }
      else {
        $$(".val_title_notempty").each(Element.hide);
      }

      this.saving = true; // signal other events we are about to save

      this.savedBox.hide();
      this.savingBox.show();

      if (this.interactionParameters.isNew) {
       // calculate "automatic" document name:
       var name = title.replace(/[\/?]/g,'');

       // ask the JSONService to create an unused event name for us
       new Ajax.Request( this.helper.newPageNameUrl, {
        method: 'get',
        parameters: { 'outputSyntax': 'plain', 'newEvent' : name, 'parent': $F($("calendarParent")) },
        onSuccess: function(response) {
          try {
            var error = (response.responseJSON) ? response.responseJSON['error'] : "$escapetool.javascript($services.localization.render('MoccaCalendar.generic.errormessage'))";
            if (error) {
              this.savingBox.hide();
              this.helper.displayError(error);
            } else {
              var eventName = response.responseJSON['name'];
              var parentLocation = response.responseJSON['parent'];
              this.saveEvent(parentLocation, eventName);
            }
          } catch(e) { alert(e); }
        }.bind(this),
        onFailure: function(response) {
          // this should not happen ...
          try {
            this.saving = false;
            this.savingBox.hide();
            this.helper.displayError();
          } catch(e) { alert(e); }
        }.bind(this)
       });
      } else {
        this.saveEvent();
      }

      return false;
    },

    /** save the current event.
        Note: parameters are only used if event is new, as otherwise we know the url to save the event to already
    */
    saveEvent: function(parentCalendar, newEventName) {
      var saveUrl;
      if (this.interactionParameters.isNew) {
        var calendarRef = XWiki.Model.resolve(parentCalendar, XWiki.EntityType.SPACE);
        var newEventSpaceRef = new XWiki.EntityReference(newEventName, XWiki.EntityType.SPACE, calendarRef);
        var newEventRef = new XWiki.EntityReference("WebHome", XWiki.EntityType.DOCUMENT, newEventSpaceRef);
        saveUrl = new XWiki.Document(newEventRef).getURL('save', this.helper.newPageParams);
      } else {
        saveUrl = this.interactionParameters.event.saveUrl;
      }
      this.content.writeAttribute('action', saveUrl + '&amp;xpage=plain&amp;ajax=true');
      this.content.request({
        onSuccess: function() {
          this.saving = false;
          this.savingBox.hide();
          this.savedBox.show();
          removeColorPickers();
          this.closeDialog();
          this.helper.calendar.fullCalendar('refetchEvents');
        }.bind(this),
        onFailure: function(e) {
          try {
            this.saving = false;
            var responseText = e.responseText;
            $("forminnercontent").innerHTML = responseText;
            this.savingBox.hide();
            if (e.status &gt; 400) { this.helper.displayError(); }

            document.fire('xwiki:dom:updated', {elements: [$('forminnercontent')]});
            document.fire('xwiki:moccacalendar:editloaded');
          } catch (e) {
            alert('Failed to save event!');
          }
        }.bind(this)
      })
    },

    deleteEvent: function() {
      var pending = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.inProgress'))", "inprogress");
      new Ajax.Request(this.interactionParameters.event.deleteUrl, {
        method: 'post',
        parameters: {'confirm': 1, 'ajax': true, 'form_token': this.helper.formToken},
        onSuccess: function(transport) {
          if (transport.status == 0) {
            return;
          }
          pending.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.done'))", "done");
          this.helper.calendar.fullCalendar('refetchEvents');
        }.bind(this),
        onFailure: function(e) {
          pending.hide();
          this.helper.displayError();
          this.helper.calendar.fullCalendar('refetchEvents');
        }.bind(this)
      });
    },

    deleteSingleEventInstance: function() {
      if (!this.interactionParameters.event.recurrent) {
        // use the "delete all instances" code, as we only have one instance of the event
        return this.deleteEvent();
      }

      var pending = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.inProgress'))", "inprogress");
      new Ajax.Request(this.helper.deleteEventInstanceUrl, {
        method: 'post',
        parameters: {'instanceStart' : this.interactionParameters.event.start.format('YYYY-MM-DD[T]HH:mm'), 'event' : this.interactionParameters.event.id, 'outputSyntax':'plain' },
        onSuccess: function(response) {
          if (response.status == 0) {
            return;
          }
          pending.hide();
          if (response.responseJSON['error']) {
            this.helper.displayError(response.responseJSON['error']);
          } else {
            new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.done'))", "done");
          }
          this.helper.calendar.fullCalendar('refetchEvents');
        }.bind(this),
        onFailure: function(e) {
          pending.hide();
          this.helper.displayError();
          this.helper.calendar.fullCalendar('refetchEvents');
        }.bind(this)
      });
    },

    loadEventContent: function() {
      var url;
      if (this.interactionParameters.isNew) {
        url = this.interactionParameters.pageURL;
      } else {
        url = (this.interactionParameters.editMode)?this.interactionParameters.event.editUrl:this.interactionParameters.event.url;
      }
      new Ajax.Request(url, {
        method: 'get',
        parameters: {'xpage': 'plain', 'xhidden': 1},
        onSuccess: function(transport) {
          if (transport.status == 0) {
            return;
          }
          var response = transport.responseText || "no response text";
          var old = $('formcontent');
          if (old) {
            old.purge();
            old.remove();
          }
          this.injectHTML(this.content, response);
          var formcontent = $('formcontent');
          var buttons = new Element('div', {'class':'buttons'});
          var oldSkin = ! $('body').hasClassName('skin-flamingo'); // FIXME: bad b/w compat hack
          formcontent.insert(buttons);
          // When you are in a read only calendar you only need the close button for the modal and you MUST Not fire
          // the xwiki:moccacalendar:editloaded event because you will get a bunch of errors.
          if (this.interactionParameters.editMode) {
            var that = this;
            if(this.helper.createEventBaseUrl.indexOf('disabled=disabled') === -1) {
              buttons.insert(this.createButton("submit","$escapetool.javascript($services.localization.render('save'))","","save-moccacalendar-event","btn"));
              buttons.down('#save-moccacalendar-event').observe('click', this.submitForm.bind(this));
              // MOCCACAL-128: the event template has a space in the title to avoid showing the page name, but we want to remove this on load
              var titleField = formcontent.down('input[name="title"]')
              if (titleField &amp;&amp; titleField.getAttribute('value').trim() == '') { titleField.setAttribute('value','') }
              document.fire('xwiki:moccacalendar:editloaded');
            }
            buttons.insert('&lt;span class="buttonwrapper"&gt;&lt;a href="#" id="cancel-moccacalendar-event" class="secondary button"&gt;' + "$escapetool.javascript($services.localization.render('cancel'))" + '&lt;/a&gt;&lt;/span&gt;');
            buttons.down('#cancel-moccacalendar-event').observe('click', this.closeDialog.bind(this));
            $("MoccaCalendarEvent.MoccaCalendarEventClass_0_title").focus();
          } else {
            var leftGroup = new Element('div', {'class':'btn-group btn-group-left'});
            buttons.insert(leftGroup);
            if (this.interactionParameters.event.canEdit) {
              if (oldSkin) {
                leftGroup.insert(this.createButton("button","$escapetool.javascript($services.localization.render('edit'))","","edit-moccacalendar-event","btn"));
              } else {
                leftGroup.insert('&lt;button class="button btn btn-default" id="edit-moccacalendar-event"&gt;&lt;span class="glyphicon glyphicon-pencil"&gt;&lt;/span&gt; '+"$escapetool.javascript($services.localization.render('edit'))"+'&lt;/button&gt;');
              }
              leftGroup.down("#edit-moccacalendar-event").observe('click', this.loadEditForm.bind(this));
            }
            // FIXME: this should be a plain link, but then it has no styles
            if (oldSkin) {
              if (this.interactionParameters.event.readOnly != true) {
                leftGroup.insert(this.createButton("button","$escapetool.javascript($services.localization.render('view'))","","view-moccacalendar-event","btn"));
              }
              leftGroup.insert('&lt;span class="buttonwrapper"&gt;&lt;a href="#" id="cancel-moccacalendar-event" class="secondary button"&gt;' + "$escapetool.javascript($services.localization.render('cancel'))" + '&lt;/a&gt;&lt;/span&gt;');
            } else {
              if (this.interactionParameters.event.readOnly != true) {
                leftGroup.insert(' &lt;button class="button btn btn-default" id="view-moccacalendar-event"&gt;&lt;span class="glyphicon glyphicon-file"&gt;&lt;/span&gt; '+"$escapetool.javascript($services.localization.render('view'))"+'&lt;/button&gt;');
              }
              leftGroup.insert('&lt;button class="button btn btn-default" id="cancel-moccacalendar-event"&gt;&lt;span class="glyphicon glyphicon-remove"&gt;&lt;/span&gt; '+"$escapetool.javascript($services.localization.render('cancel'))"+'&lt;/button&gt;');
            }
            if (this.interactionParameters.event.readOnly != true) {
              leftGroup.down("#view-moccacalendar-event").observe('click', function(e) { e.stop(); window.location.href = this.interactionParameters.event.viewUrl; }.bind(this));
            }
            leftGroup.down('#cancel-moccacalendar-event').observe('click', this.closeDialog.bind(this));
            if (this.interactionParameters.event.canDelete) {
              var rightGroup = new Element('div', {'class':'btn-group btn-group-right'});
              buttons.insert(rightGroup);
              if (oldSkin) {
                rightGroup.insert(this.createButton("button","$escapetool.javascript($services.localization.render('delete'))","","delete-moccacalendar-event","btn"));
              } else {
                var button = ' &lt;button class="button remove-button btn btn-danger" type="button"' +
                  'id="delete-moccacalendar-event" data-toggle="modal" data-target="#deleteEvents"&gt;'
                var span = '&lt;span class="glyphicon glyphicon-remove"&gt; &lt;/span&gt; '
                rightGroup.insert(button + span +
                  "$escapetool.javascript($services.localization.render('delete'))"+'&lt;/button&gt;');
              }
              jQuery(rightGroup).find('#delete-moccacalendar-event').data('calendarPopup', this);
            }
            formcontent.insert(new Element('div', {'class': 'clearfloats'}));
          }
        }.bind(this),
        onFailure: function() {
          this.content.insert('Something went wrong...');
        }.bind(this)
      });
    },
    injectHTML: function(content, response) {
      // We don't use Element#update() because it doesn't move external scripts and sheets into HEAD and also because we
      // don't want to support in-line scripts in displayers.
      var container = new Element('div');
      container.innerHTML = response;
      var head = document.body.previous('head');
      container.select('link').each(function(link) {
        head.insert(link);
      });
      container.select('script').each(function(script) {
        if (script.src) {
          head.insert(new Element('script', {type: script.type, src: script.readAttribute('src')}));
        }
        script.remove();
      });
      content.insert('&lt;div id="formcontent"&gt;&lt;div id="forminnercontent"&gt;' + container.innerHTML + '&lt;/div&gt;&lt;/div&gt;');

      var parentModalPopup = jQuery('.xdialog-box-moccacal-modal-popup').toArray();
      document.fire('xwiki:dom:updated', {elements: parentModalPopup});
    },
    handleDatetimeFieldChange : function(event, element) {
      if (this.saving) { return; }
      var dateStr = element.getValue()
      if (dateStr.match(/^\s*$/)) {
        return;
      }

      // now we would have to find out if the user has typed in something like a date with a time
      // for this we have to parse the date. as we do not have any generic way to do that we send it to the backend ...
      this.checkIfDateWithTime(function(result) {
         var allDay = result.responseJSON.isAllDay;
         if (allDay === '') { return; } // indeterminate
         if (allDay != this.allDay.getValue()) {
           this.allDay.setValue(allDay)
           this.handleAllDayFieldChange(null, this.allDay)
         }
      }.bind(this))
    },
    checkIfDateWithTime : function(callback) {
      new Ajax.Request( this.helper.dateCheckUrl, {
        method: 'get',
        parameters: {action: 'checkDate', outputSyntax: 'plain', 'startDate' : $F('MoccaCalendar.MoccaCalendarEventClass_0_startDate'), 'endDate' : $F('MoccaCalendar.MoccaCalendarEventClass_0_endDate')},
        onSuccess: callback,
        onFailure: function(response) {
          // this should not happen ...
          try {
            this.helper.displayError();
          } catch(e) { alert(e); }
        }.bind(this)
      })
    },

    handleAllDayFieldChange : function(event, element) {
      if (this.saving) { return; }
      var that = this;
      var updatedElements = [];
      // Recreate the date time pickers with the new date format.
      var newDateFormat = element.getValue() ? that.helper.dayFormat : that.helper.dateFormat;
      this.content.select('input.datetime').each(function(dateTimeInput) {
        // FIXME: Preserve the selected date time value when changing the format.
        var clone = dateTimeInput.cloneNode();
        clone.classList.remove('initialized');
        clone.setAttribute('title', newDateFormat);
        clone.setAttribute('data-format', newDateFormat);
        dateTimeInput.parentNode.replaceChild(clone, dateTimeInput);
        updatedElements.push(clone.parentNode);
      });
      document.fire('xwiki:dom:updated', {elements: updatedElements});
    }
  });


  //
  // our "agenda" view - a bit different from what fullCalendar calls an "agenda"
  // so for fullCalendar we call it "plainList"
  //
  // since fullcalendar3 parts of the view are split into component classes

  // the date range generater
  // we totally abuse the mechanism to have only two date ranges
  // XXX: DateProfileGenerator has no "extends", so we "subclass" manually
  var PastFutureGenerator =  (function () {
    var _super = fullCalendar.DateProfileGenerator;
    function PastFutureGenerator() {
        return _super.apply(this, arguments)
    }

    PastFutureGenerator.prototype = Object.extend({}, _super.prototype)

    // Given a single current unzoned date, produce information about what range to display.
    //
    // we only have two ranges:
    //   if date is in the past: from 2yrs ago to yesterday
    //   if date is in the future: from now to 2yrs in the future
    PastFutureGenerator.prototype.buildCurrentRangeInfo = function(date, direction) {
      duration = 0
      unit = 'year'
      if (direction === undefined) {
        if (this._view.isPast) {
          direction = -1
        } else {
          direction = 1
        }
      }
      date = this._view.calendar.getNow().clone().stripTime()
      if (direction &lt; 0) {
        endDate = date.clone().subtract(1,'d')
        startDate = endDate.clone().subtract(2, 'y')
      } else {
        startDate = date.clone()
        endDate = startDate.clone().add(2, 'y')
      }
      unzonedRange = new fullCalendar.UnzonedRange(startDate, endDate);
      return { duration: duration, unit: unit, unzonedRange: unzonedRange }
    }

    return PastFutureGenerator;
  }());

  // the "event renderer"
  // this seems the way to go with fullcalendar3
  // except that for some reason we still have to insert
  // the generated html manually afterwards
  var PlainListEventRenderer = (function () {
    var _super = fullCalendar.EventRenderer;
    function PlainListEventRenderer() {
      return _super.apply(this, arguments)
    }

    PlainListEventRenderer.prototype = Object.extend({}, _super.prototype)

    PlainListEventRenderer.prototype.render = function(eventsPayload) {
      var events = []
      // oh, great, the eventsPayload has repacked all events, loosing the sort
      for (key in eventsPayload) {
        var v = eventsPayload[key].eventInstances;
        // console.log('render', key, v);
        for (var i=0; i&lt;v.length; i++) {
          events.push(v[i]);
        }
      }

      var larger, smaller;
      if (this.view.isPast) {
        larger = 1
        smaller = -1
      } else {
        larger = -1
        smaller = 1
      }
      events.sort(function(e1,e2) {
        if (e1.dateProfile.start.isBefore(e2.dateProfile.start)) {
          return larger;
        }
        if (e2.dateProfile.start.isBefore(e1.dateProfile.start)) {
          return smaller;
        }
        return 0;
      })

      rendered = []
      for (var i=0; i&lt;events.length; i++) {
        var event = events[i]
        // here we should really render something
        // instead of relying on the server side generated html
        var seg = {
          footprint: event,
          el: jQuery(event.def.miscProps.html)
        }
        seg.el.data('fc-seg', seg)
        rendered.push(seg)
      }
      this.fgSegs = rendered;
      return true;
    }

    return PlainListEventRenderer;
  }());

  var PlainList = fullCalendar.View.extend({

    initialize: function() {
      this._super = fullCalendar.ListView.prototype;
      this.isPast = false;
    },

    executeEventRender: function(eventsPayload) {
      var retVal = this._super.executeEventRender.apply(this, arguments);
      // here we must have done something wrong,
      // as we need to fetch the rendered elements from the eventRenderer
      // and insert then manually
      this.contentEl.empty()
      segs = this.eventRenderer.fgSegs
      if (segs.length == 0) {
        this.contentEl.append(jQuery('&lt;p&gt;').text(this.options['noEventsMessage']))
      } else {
        for (var i=0;i&lt;segs.length; i++) {
          this.contentEl.append(segs[i].el)
        }
      }
      return retVal;
    },

    executeEventUnrender: function() {
      this.contentEl.empty()
      return this._super.executeEventUnrender.apply(this, arguments);
    },

    // Given a single current unzoned date, produce information about what range to display.
    // Subclasses can override. Must return all properties.
    // we only have two ranges:
    //   if date is in the past: from 2yrs ago to yesterday
    //   if date is in the future: from now to 2yrs in the future
    // Returning a larger interval might give much too much
    // results in case of recurrent events.
    computeRange: function(date) {
      start = this.calendar.getNow().clone().stripTime();
      this.isPast = date.isBefore(start)
      if (this.isPast) {
        end = start.clone().subtract(1, 'd')
        start = start.subtract(2, 'y')
      } else {
        end = start.clone().add(2, 'y')
      }
      return {
        intervalUnit: 'year',
        intervalStart: start,
        intervalEnd: end,
        start: start,
        end: end
      };
    },

    renderSkeleton: function() {
      this.el.append('&lt;div class="fc-timeline-box" style="width:100%"/&gt;');
      this.contentEl = jQuery('.fc-timeline-box',this.el);
      this.contentEl.append('&lt;img src="$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')" alt="$escapetool.xml($services.localization.render('platform.livetable.loading'))" /&gt;');
    },

    // this method is both called with the pre/next buttons
    // and from other places to ensure the date is in range.
    // we set the "isPast" flag as a side effect here
    setDate: function(date) {
      now = this.calendar.getNow().clone().stripTime();
      this.isPast = date.isBefore(now);
      return this._super.setDate.apply(this, arguments);
    },

    computeTitle: function() {
      if (this.isPast) {
        this.title = "$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist.titlepast'))";
        this.options['noEventsMessage'] = "$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist.nopastevents'))";
      } else {
        this.title = "$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist.titleupcoming'))";
        this.options['noEventsMessage'] = "$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist.noupcomingevents'))";
      }
      return this.title;
    },

    // drag &amp; drop protocol - no-ops
    select: function(start, end) {
      // console.log('select');
    },
    unselect: function() {
      // console.log('unselect');
    },

  }) // end PlainList extends View

  // hook up component classes to the view
  PlainList.prototype.dateProfileGeneratorClass = PastFutureGenerator
  PlainList.prototype.eventRendererClass = PlainListEventRenderer

  fullCalendar.defineView('plainList', PlainList)

} // if the XWiki.widgets.ModalPopup  is defined

});

define('mocca-calendar-import-notification', {
  prefix: 'MoccaCalendar.import.notification.',
  keys: [
    'inprogress',
    'done',
    'error',
    'filetoolarge'
  ]
});

/**
 * Delete event and calendar import actions.
 */
require(['jquery', 'xwiki-meta', 'xwiki-job-runner', 'xwiki-l10n!mocca-calendar-import-notification'],
  function($, xwikiMeta, JobRunner, l10n) {
  /**
  * Events triggered before deleteEvents modal is shown: save the button that triggers
  * the modal, close MoccaCalendarPopup, update the name of event on displayed text.
  */
  $(document).on('show.bs.modal', '#deleteEvents', function(event) {
    var relatedTarget = $(event.relatedTarget);
    $(this).data('relatedTarget', relatedTarget);
    var calendarPopup = relatedTarget.data('calendarPopup');
    calendarPopup.closeDialog();
    var eventIsRecurrent = calendarPopup.interactionParameters.event.recurrent;
    var eventName = '«' + calendarPopup.interactionParameters.event.title + '»';
    $(this).find('input.do-delete-all').toggle(eventIsRecurrent);
    $(this).find('.modal-body').text(
      $jsontool.serialize($services.localization.render('MoccaCalendar.calendarevent.confirmDelete', '__replace__'))
      .replace('__replace__', eventName));
  });
  /**
  * Events on modal buttons, for deleting an event or cancelling the action.
  */
  $(document).on('click', '#deleteEvents input.btn-danger.do-delete', function() {
    var relatedTarget = $('#deleteEvents').data('relatedTarget');
    var calendarPopup = relatedTarget.data('calendarPopup');
    calendarPopup.deleteSingleEventInstance();
  });
  $(document).on('click', '#deleteEvents input.btn-danger.do-delete-all', function() {
    var relatedTarget = $('#deleteEvents').data('relatedTarget');
    var calendarPopup = relatedTarget.data('calendarPopup');
    calendarPopup.deleteEvent();
  });
  $(document).on('click', '#deleteEvents input.btn-default', function() {
    var relatedTarget = $('#deleteEvents').data('relatedTarget');
    var calendarPopup = relatedTarget.data('calendarPopup');
    new XWiki.MoccaCalendar.MoccaCalendarPopup(calendarPopup.interactionParameters, calendarPopup.helper);
  });

  // Trigger the upload manually when the button is clicked.
  $(document).on('click', '#import-calendar-file-button', function(event) {
    var form = $('#import-calendar-file form').get(0);
    if (event) {
      event.preventDefault();
    }
    startUploading(form);
  });

  // Start uploading this file by creating a new XHR object with the file data.
  var startUploading = function (form) {
    var formData = new FormData(form);
    var select = form.down('#import-calendar-parent');
    var input = form.down('#import-ical-file-input');
    if (input.files[0].size &lt; input.dataset.maxFileSize) {
      var params = {};
      params[select.name] = select.value;
      formData.action = form.action + "?" + $.param(params);
      // Create XMLHttpRequest object and POST the data
      var request = this.request = new XMLHttpRequest();
      request.open('POST', formData.action);
      request.send(formData);
      checkImportJob(select.value);
    } else {
      var notification = new XWiki.widgets.Notification(l10n.get('filetoolarge'), 'error');
    }
  }

  const checkImportJob = function(selectedCalendar) {
    let documentReference = XWiki.Model.resolve('MoccaCalendar.Code.ImportJobResource', XWiki.EntityType.DOCUMENT);
    var targetURL = new XWiki.Document(documentReference).getURL('get');
    var targetJobId = ['moccacalendar', 'import', selectedCalendar];
    var data = [];
    data.push(
      {name: 'outputSyntax', value: 'plain'},
      {name: 'sheet', value: 'MoccaCalendar.Code.ImportJobResource'},
      {name: 'action', value: 'jobStatus'},
      {name: 'jobId', value: targetJobId.join('/')},
      {name: 'data', value: 'jobStatus'},
      {name: 'form_token', value: xwikiMeta.form_token}
    );
    var notification = new XWiki.widgets.Notification(l10n.get('inprogress'), 'inprogress');
    $('#import-calendar-file-button').prop('disabled', true);
    return Promise.resolve(new JobRunner({
      createStatusRequest: function(jobId) {
        return {
          url: targetURL,
          data: {
            outputSyntax: 'plain',
            sheet: 'MoccaCalendar.Code.ImportJobResource',
            data: 'jobStatus',
            jobId: jobId.join('/')
          }
        };
      }
    }).run(targetURL, data)).then((response) =&gt; {
      if (response.error !== null) {
        throw new Error(response.error.message);
      } else {
        document.dispatchEvent(new Event('calendarImportCompleted'));
        notification.replace(new XWiki.widgets.Notification(l10n.get('done'),'done'));
      }
    }).catch((reason) =&gt; {
      notification.replace(new XWiki.widgets.Notification(l10n.get('error'),'error'));
      return Promise.reject(reason);
    }).finally(() =&gt; {
      $('#import-calendar-file-button').prop('disabled', false);
    });
  };
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>45a5f3c1-9bc2-4338-bfda-735845df37cd</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>/* events */
div.calendar_date_select {
  z-index: 1010;
}
div.moccaevent {
  border-style:solid;
  border-width:0 0 0 5px;
  padding-left: 5px;
}
div.moccaevent h5 {
  margin-bottom: 5px;
}

/* events in the modal dialog */
div.xdialog-box-moccacal-modal-popup .btn-group.btn-group-left {
  float: left;
}
div.xdialog-box-moccacal-modal-popup .btn-group.btn-group-right {
  float: right;
}
div.xdialog-box-moccacal-modal-popup .btn-group .btn + .btn {
  margin-left: 1ex;
}
/* a special rule for flamingo to try to fit the edit form in the model dialog */
.skin-flamingo div.xdialog-box-moccacal-modal-popup .xform dl dt {
   margin-top: 0.6em;
}
.xdialog-box-moccacal-modal-popup {
  width: 600px;
}

/* Make sure the date time picker is shown on top of the event modal. */
.bootstrap-datetimepicker-widget {
  z-index: 1006;
}

/* twiddeling with the recurrency input field position */
div.xdialog-box-moccacal-modal-popup dl {
   margin-bottom: 0;
}
div.xdialog-box-moccacal-modal-popup #recurrentFields dl {
   margin-bottom: 20px;
}

/* calendar */
body .fc {
  padding-right: 1px; /* odd hack to avoid scrollbars in FF at times */
}
div.calendar-buttons {
  position: relative;
  margin-top: 2.4em;
}
.skin-flamingo div.calendar-buttons {
  margin-top: 2.8em;
}
div.calendar-buttons span.buttonwrapper {
  position: absolute;
  right: 0;
  top: -2.2em;
  margin: 0;
}
.skin-flamingo div.calendar-buttons span.buttonwrapper {
  right: 1px;
  top: -2.8em;
}
/* special rules if showing calendars as gadgets in the dashboard - everything is a bit smaller to fit in */
.gadget .fc-toolbar, .gadget div.calendar-buttons {
  font-size: 85%;
}
.gadget div.calendar-buttons span.buttonwrapper {
  top: -2em;
}
.skin-flamingo .gadget div.calendar-buttons span.buttonwrapper {
  top: -3.2em;
}
.gadget .fc h2 {
  border: 0;
}
.skin-flamingo .gadget .fc h2 {
  font-size: 140%;
}

.import-form {
  padding: 2em;
}

.import-form label {
  margin-bottom: 0.8em;
  font-weight: bold;
}

.import-form select,
.import-form #import-ical-file-input {
  width: 100%;
  margin-bottom: 1.6em;
  border-radius: 0.4em;
}

.import-form #import-ical-file-input {
  padding: 0.6em 1em;
  border: 1px solid #ccc;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>0</number>
    <className>XWiki.WikiMacroClass</className>
    <guid>1f960d6f-5530-4612-b3a3-8eed08888e10</guid>
    <class>
      <name>XWiki.WikiMacroClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <async_cached>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_cached</name>
        <number>13</number>
        <prettyName>Cached</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_cached>
      <async_context>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>1</multiSelect>
        <name>async_context</name>
        <number>14</number>
        <prettyName>Context elements</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>, </separator>
        <separators>|, </separators>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <values>action=Action|doc.reference=Document|icon.theme=Icon theme|locale=Language|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=Request base URL|request.parameters=Request parameters|request.url=Request URL|request.wiki=Request wiki|user=User|wiki=Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </async_context>
      <async_enabled>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_enabled</name>
        <number>12</number>
        <prettyName>Asynchronous rendering</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_enabled>
      <code>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>code</name>
        <number>10</number>
        <prettyName>Macro code</prettyName>
        <rows>20</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentDescription>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>contentDescription</name>
        <number>9</number>
        <prettyName>Content description (Not applicable for "No content" type)</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </contentDescription>
      <contentJavaType>
        <cache>0</cache>
        <defaultValue>Unknown</defaultValue>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <freeText>allowed</freeText>
        <largeStorage>1</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentJavaType</name>
        <number>8</number>
        <picker>1</picker>
        <prettyName>Macro content type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Unknown|Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentJavaType>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>7</number>
        <prettyName>Macro content availability</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Optional|Mandatory|No content</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <defaultCategory>
        <disabled>0</disabled>
        <name>defaultCategory</name>
        <number>4</number>
        <prettyName>Default category</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultCategory>
      <description>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>description</name>
        <number>3</number>
        <prettyName>Macro description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <id>
        <disabled>0</disabled>
        <name>id</name>
        <number>1</number>
        <prettyName>Macro id</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </id>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Macro name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <priority>
        <disabled>0</disabled>
        <name>priority</name>
        <number>11</number>
        <numberType>integer</numberType>
        <prettyName>Priority</prettyName>
        <size>10</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.NumberClass</classType>
      </priority>
      <supportsInlineMode>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>supportsInlineMode</name>
        <number>5</number>
        <prettyName>Supports inline mode</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </supportsInlineMode>
      <visibility>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>visibility</name>
        <number>6</number>
        <prettyName>Macro visibility</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Current User|Current Wiki|Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </visibility>
    </class>
    <property>
      <async_cached>0</async_cached>
    </property>
    <property>
      <async_context/>
    </property>
    <property>
      <async_enabled>0</async_enabled>
    </property>
    <property>
      <code>{{velocity output="false"}}
$xwiki.jsx.use("Calendar.FullCalendar", {'defer': false, 'minify': false})
$xwiki.jsx.use("MoccaCalendar.Code.Macro", {'defer': false, 'v' : '2.7'})
$xwiki.jsx.use("MoccaCalendar.Code.DatePickerExtension", {'defer': false})
$xwiki.jsx.use("MoccaCalendar.MoccaCalendarEventSheet")
$xwiki.jsx.use("MoccaCalendar.Code.MoccaCalendarEventModificationClass")
#dateTimePicker_import()
$xwiki.ssx.use("Calendar.FullCalendar")
$xwiki.ssx.use("MoccaCalendar.Code.Macro")
#set($calcounter = $request.getAttribute('MoccaCalendar.Code.Macro:counter'))
#if(!$calcounter) #set($calcounter = 0) #else #set($calcounter = $calcounter + 1) #end
#set($discard = $request.setAttribute('MoccaCalendar.Code.Macro:counter', $calcounter))
#set ($wikis = "$!xcontext.macro.params.wikis")
#set ($wikiList = [])
#if ($wikis != '')
  #foreach ($wikiId in $wikis.split(','))
    #set ($discard = $wikiList.add($wikiId.trim()))
  #end
#end
#set($filter = $xcontext.macro.params.filter)
#if(!$filter)
#set($filter = 'page') ## possible values are wiki, space, page
#end
#set($calendarDoc = $xcontext.macro.params.calendarDoc)
#if(!$calendarDoc)
#set($calendarDoc = $doc.fullName)
#end
#set($filterDoc = $xcontext.macro.params.filterDoc)
#if(!$filterDoc)
#set($filterDoc = $calendarDoc)
#end
#set($defaultView = $xcontext.macro.params.defaultView)
#if(!$defaultView)
 #set($defaultView = "")
#end
#set($firstDay = $xcontext.macro.params.firstDay)
#if(!$firstDay)
  #set($firstDay = "$services.localization.render('MoccaCalendar.calendar.firstDayOfWeek')")
#end
#set($minTime = $xcontext.macro.params.minTime)
#if(!$minTime)
  #set($minTime = "")
#else
  ## b/w compat:
  #if($minTime.indexOf(':')&lt;0))
    #set($minTime = "$minTime:00")
  #end
#end
#set($maxTime = $xcontext.macro.params.maxTime)
#if(!$maxTime)
  #set($maxTime = "")
#else
  ## b/w compat:
  #if($maxTime.indexOf(':')&lt;0))
    #set($maxTime = "$maxTime:00")
  #end
#end
#set($year = $xcontext.macro.params.year)
#if(!$year)
 #set($year = "")
#end
#set($month = $xcontext.macro.params.month)
#if(!$month)
 #set($month = "")
#end
#set($date = $xcontext.macro.params.date)
#if(!$date)
 #set($date = "")
#end
#set($gCal = "$!xcontext.macro.params.gCal")
#set($gApiKey = $xcontext.macro.params.gApiKey)
#if(!$gApiKey)
  #set($gApiKey = "")
#end
#set($iCal = $xcontext.macro.params.iCal)
#if(!$iCal)
  #set ($iCal = "")
#end
## Prepare the fields if the subscribed class is present
#set ($subscribed = $doc.getObject('MoccaCalendar.MoccaCalendarSubscribeClass'))
#if ($subscribed)
  #set ($subscribediCal = $subscribed.getValue('iCal'))
  #set ($subscribedgCals = $subscribed.getValue('gCal'))
  #set ($gApiKeySubscribed = $subscribed.getValue('gApiKey'))
  #set ($subscribedColor = $subscribed.getValue('color'))
  #set ($subscribedTextColor = $subscribed.getValue('textColor'))
  #set ($disableCreationEvent = 'disabled')
#else
  #set ($subscribediCals = '')
  #set ($subscribedgCals = '')
  #set ($gApiKeySubscribed = '')
  #set ($subscribedColor = 'blue')
  #set ($subscribedTextColor = 'white')
  #set ($disableCreationEvent = "")
#end

## If the date format is not set in MoccaCalendarEventClass, we are going to use the date format from the current wiki.
#set($dateFormat = $!xwiki.getClass("MoccaCalendar.MoccaCalendarEventClass").get("startDate").getProperty('dateFormat').value)
#if("$!dateFormat" == "")
  ## If the date format set from the current xwiki is not set, a default value will be provided.
  #set($dateFormat = $xwiki.getXWikiPreference('dateformat', 'yyyy/MM/dd HH:mm'))
#end

## Set the time format from the date format, if the date format doesn't include information about the time, a default value will be set.
#macro(setTimeFormat $dateFormat $timeFormat)
  #set($timeFormatStart = $stringtool.indexOfAny($dateFormat, 'HhKk'))
  #if($timeFormatStart &lt; 0)
    #setVariable('$timeFormat', 'HH:mm')
  #else
    #setVariable('$timeFormat', $dateFormat.substring($timeFormatStart))
  #end
#end
#setTimeFormat($dateFormat, $timeFormat)
##
## some hardwired values that you can feel free to customize
##
#set($jsonUrl = $xwiki.getDocument("MoccaCalendar.Code.JSONService").getURL("get"))
#set($newPageNameUrl = $xwiki.getDocument("MoccaCalendar.Code.NewEventNameService").getURL("get"))
#set($dateCheckUrl = $xwiki.getDocument("MoccaCalendar.Code.DateCheckService").getURL("get"))
#set($updateUrl = $xwiki.getDocument("MoccaCalendar.Code.UpdateService").getURL("get"))
#set($deleteEventInstanceUrl = $xwiki.getDocument("MoccaCalendar.Code.DeleteEventInstanceService").getURL("get"))
#set($left = "prev,next today")
#set($center = "title")
#set($right = "agendaDay,agendaWeek,month,plainList")

#set($canCreateEvents = $xwiki.hasAccessLevel("edit", $xcontext.getUser(), $calendarDoc))

## Macro for the modal that's used on deleting an event
#macro(showDeleteEventsModal)
  &lt;div class="modal fade" id="deleteEvents" tabindex="-1" role="dialog"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal"&gt;&amp;times;&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;
            $services.localization.render('moccacalendarevent.livetable._actions.delete')
          &lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;div&gt;$services.localization.render('MoccaCalendar.calendarevent.confirmDelete')&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="modal-footer"&gt;
          &lt;input type="button" class="btn btn-danger do-delete-all"
            value="$escapetool.xml($services.localization.render('MoccaCalendar.calendarevent.confirmDelete.allEventsButton'))" data-dismiss="modal"&gt;
          &lt;input type="button" class="btn btn-danger do-delete"
            value="$escapetool.xml($services.localization.render('yes'))" data-dismiss="modal"&gt;
          &lt;input type="button" class="btn btn-default"
            value="$escapetool.xml($services.localization.render('no'))" data-dismiss="modal"&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
#end

#macro(importCalendarFileModal)
  &lt;div class="modal fade" id="import-calendar-file" tabindex="-1" role="dialog"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal"&gt;&amp;times;&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;
            $escapetool.xml($services.localization.render('MoccaCalendar.import.modal.title'))
          &lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          #set ($escapedCalendarSpace = $escapetool.xml($doc.getSpace()))
          #set ($escapedCalendarName = $escapetool.xml($doc.getDocumentReference().getName()))
          #set ($actionURL = "$request.getContextPath()/rest/moccacalendar/import")
          &lt;form class="xform" action="$actionURL" method="post"&gt;
            &lt;div class="import-form"&gt;
              &lt;label for="import-calendar-parent"&gt;
                $escapetool.xml($services.localization.render('MoccaCalendar.calendar'))&lt;/label&gt;
              &lt;select id="import-calendar-parent" name="parentCalendar"&gt;
                #foreach ($item in $services.moccacalendar.getAllCalendars()) ## TODO: add filter here, see MOCCACAL-76
                  #set ($itemdoc = $xwiki.getDocument($item))
                  #if ($!{itemdoc} &amp;&amp; ${itemdoc.hasAccessLevel("edit")})
                    #set ($selected="")
                    #if ($itemdoc.getId() == $doc.getId())
                      #set ($selected=" selected='selected'")
                    #end
                    &lt;option value="$escapetool.html($itemdoc.getFullName())"$selected&gt;
                      $itemdoc.getDisplayTitle()&lt;/option&gt;
                  #end
                #end
              &lt;/select&gt;
              &lt;label for="import-ical-file-input"&gt;$escapetool.xml($services.localization.render(
                'MoccaCalendar.import.modal.file.label'))&lt;/label&gt;
              &lt;input type="file" id="import-ical-file-input" accept=".ics" name="importedfile"
                data-max-file-size="$!escapetool.xml($xwiki.getSpacePreference('upload_maxsize'))"&gt;
            &lt;/div&gt;
          &lt;/form&gt;
        &lt;/div&gt;
        &lt;div class="modal-footer"&gt;
          &lt;input type="button" class="btn btn-primary" id="import-calendar-file-button"
            value="$escapetool.xml($services.localization.render('MoccaCalendar.import.modal.button.start'))"&gt;
          &lt;input type="button" class="btn btn-default"
            value="$escapetool.xml($services.localization.render('cancel'))" data-dismiss="modal"&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
#end
{{/velocity}}

{{velocity}}
#macro(getSubscribedCalendars)
  #set ($query =  ", BaseObject as obj where doc.fullName = obj.name and obj.className = 'MoccaCalendar.MoccaCalendarSubscribeClass'")
  #set ($calendarDocumentsReferences = $services.query.hql($query).execute())
  #set ($properties = [])
  #foreach($reference in $calendarDocumentsReferences)
    #set ($document = $xwiki.getDocument($reference))
    #set ($class = $document.getObject('MoccaCalendar.MoccaCalendarSubscribeClass'))
    #if ($class.getValue('globalDisplay') == '1')
      #set ($discard =  $properties.add({
      'iCal': $class.getValue('iCal'),
      'gCal': $class.getValue('gCal'),
      'gApiKey': $class.getValue('gApiKey'),
      'color': $class.getValue('color'),
      'textColor': $class.getValue('textColor')
      }))
    #end
  #end
#end

## Macro for handling iCal sources
#macro(handleICalSources $iCalList $color $textColor)
  #set($iCals = $stringtool.split($iCalList, ','))
  #foreach($iCal in $iCals)
    #set($json = $xwiki.getDocument('Calendar.ICalToJSON').getURL('get', "iCal=$escapetool.url($stringtool.strip($iCal))"))
    {
       url: "$json&amp;outputSyntax=plain&amp;startfield=datetime",
       backgroundColor: "$color",
       textColor: "$textColor"
    }
    #if($foreach.count &lt; $iCals.size())
      ,
    #end
  #end
#end

## Macro for handling Google Calendar sources
#macro(handleGoogleCalendarSources $gCalList $apiKey $color, $textColor)
  #set($googleCalendars = $stringtool.split($gCalList, ','))
  #foreach($calendar in $googleCalendars)
    {
      googleCalendarId: "$stringtool.strip($calendar)",
      googleCalendarApiKey: "$apiKey",
      backgroundColor: "$color",
      textColor: "$textColor"
    }
    #if($foreach.count &lt; $googleCalendars.size())
      ,
    #end
  #end
#end


## We need to check if there is a valid license because the macro is registered even if the user doesn't have view right
## on the macro definition page. See XWIKI-14828: Rendering macros defined in wiki pages are available to users that
## don't have view right on those pages.
#set ($mainReference = $services.model.createDocumentReference('', 'MoccaCalendar', 'MoccaCalendarClass'))
#if (!$services.licensing.licensor.hasLicensureForEntity($mainReference))
  {{missingLicenseMessage extensionName="moccacalendar.extension.name"/}}
#else
#if($xcontext.action=='view'){{html clean="false" wiki="false"}}
#if($canCreateEvents)
## create event link
&lt;div class="calendar-buttons"&gt;
&lt;span class="buttonwrapper"&gt;
&lt;button data-toggle="modal" data-target="#import-calendar-file"
  title="$escapetool.xml($services.localization.render('MoccaCalendar.calendarevent.import.title'))"&gt;
  $escapetool.html($services.localization.render('MoccaCalendar.calendarevent.import'))&lt;/button&gt;
&lt;button class="btn btn-success" id="calendar${calcounter}-btn"&gt;&lt;span class="glyphicon glyphicon-plus"&gt;&lt;/span&gt; $escapetool.html($services.localization.render('MoccaCalendar.calendarevent.create'))&lt;/button&gt;
&lt;/span&gt;
&lt;/div&gt;
## end create event link
#end
&lt;div id="calendar${calcounter}"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
require.config({
  paths: {
    purify: "$services.webjars.url('org.webjars.npm:dompurify', 'dist/purify.js')"
  },
});


require(['xwiki-meta', 'jquery', 'moment','purify', 'gcal', 'moccaCalendar'], function(xwikiMeta, jQuery, moment, purify) {
 jQuery(document).ready(function() {
  var defaultView = XWiki.MoccaCalendar.Helper.getCalendarView("$!escapetool.javascript($defaultView)");

  var wikiList = $jsontool.serialize($wikiList);
  wikiList = wikiList.map(item =&gt; encodeURIComponent(item));

  var defaultEventData = {
    xpage: 'plain',
    outputSyntax: 'plain',
    calendarDoc: "$!escapetool.javascript($calendarDoc)",
    wikis: wikiList,
    filter: "$!escapetool.javascript($filter)",
    filterDoc: "$!escapetool.javascript($filterDoc)",
    classname: "MoccaCalendar.MoccaCalendarEventClass",
    startfield: "startDate",
    endfield: "endDate",
    durationfield: "",
    form_token: xwikiMeta.form_token
  };

  // page is now ready, initialize the calendar...
  var calendar = jQuery('#calendar${calcounter}').fullCalendar({
    eventSources: [
      ## Source where the xwiki events are stored.
      {
        url: "$!escapetool.javascript($jsonUrl)",
        type: 'GET',
        data: function() {
          // as we also get called before the calendar is fully initialized
          // we cannot get the current view reliably from the calendar itself
          // instead use our trusty helper
          return jQuery.extend(defaultEventData, {'outputView': XWiki.MoccaCalendar.Helper.getCalendarView(defaultView)} );
        },
        error: function() {
          calendarHelper.displayError();
        },
        traditional: true
      }
      ## Subscribed iCal sources
      #if($subscribediCal)
        ,
        #handleICalSources($subscribediCal, $subscribedColor, $subscribedTextColor)
      #end
      ## Subscribed Google Calendar sources
      #if($!subscribedgCals != "")
        ,
        #handleGoogleCalendarSources($subscribedgCals, $gApiKeySubscribed, $subscribedColor, $subscribedTextColor)
      #end
      ## Global events
      #if($doc.getFullName() == 'MoccaCalendar.WebHome')
        #getSubscribedCalendars()
        #foreach($property in $properties)
          ,
          #handleICalSources($property['iCal'], $property['color'], $property['textColor'])
          ,
          #handleGoogleCalendarSources($property['gCal'], $property['gApiKey'], $property['color'], $property['textColor'])
        #end
      #end
      ## In case the user uses the calendar macro directly and dosen't use the UI to create it.
      ## iCal sources
      #if($!iCal != "")
        ,
        #handleICalSources($iCal 'black')
      #end
      ## Google Calendar public sources
      #if($!gCal != "")
        ,
        #handleGoogleCalendarSources($gCal $gApiKey 'blue')
      #end
    ],
    eventClick: function(calEvent, jsEvent, view) {
      // Prepare the read only events for the modal.
      if (!calEvent.viewUrl){
        // The XWiki default format for date is yyyy/MM/dd, which translates into 2024/01/17. However, for some weird
        // reason, when using the date.format() from JavaScript, it translates into 2024/01/Mon. We need to use the
        // moment().toMomentFormatString(format) to get the right format.
        const dateFormat = moment().toMomentFormatString(calendarHelper.dateFormat);

        // Get the sheet URL.
        const sheetURL = new XWiki.Document('MoccaCalendarEventSheet', 'MoccaCalendar').getURL('get');
        // Parameters for the modal content.
        const params = {
          title: purify.sanitize(calEvent.title),
          start: calEvent.start.format(dateFormat),
          end: calEvent.end ? calEvent.end.format(dateFormat) : null,
          allDay: calEvent.allDay ? "$escapetool.xml($services.localization.render('moccacalendar.subscribedevent.allday.yes'))" :
                                    "$escapetool.xml($services.localization.render('moccacalendar.subscribedevent.allday.no'))",
          description: purify.sanitize(calEvent.description),
          readOnly: 'true'
        };
        const queryString = jQuery.param(params);
        const requestURL = `${sheetURL}?${queryString}`;
        calEvent.url = requestURL;
        calEvent.readOnly=true;
      }
      new XWiki.MoccaCalendar.MoccaCalendarPopup({editMode: false, event: calEvent}, calendarHelper);
      jsEvent.preventDefault();
      return false;
    },
    viewRender: function(view, element) {
      XWiki.MoccaCalendar.Helper.setCalendarView(view.name);
    },
    header: {
      left: "$!escapetool.javascript($left)",
      center: "$!escapetool.javascript($center)",
      right: "$!escapetool.javascript($right)"
    },
    defaultView: defaultView,
#if($year!="")    year: $!escapetool.javascript($year),#end
#if($month!="")   month: $!escapetool.javascript($month), #end
#if($date!="")    date: $!escapetool.javascript($date), #end
    firstDay: $escapetool.javascript($firstDay),
#if($minTime!="")    minTime: "$!escapetool.javascript($minTime)", #end
#if($maxTime!="")    maxTime: "$!escapetool.javascript($maxTime)", #end
    editable: #if($canCreateEvents) true #else false#end ,
    selectable: #if($canCreateEvents) true #else false#end ,
    selectHelper: true,
    select: function(start, end, jsEvent, view) {
      calendarHelper.showCreateEventFrom(start, end);
      calendar.fullCalendar('unselect');
    },
    eventDrop: function(event, delta, revertFunc, jsEvent, ui, view) {
      calendarHelper.updateEvent(event.id, false, delta, event.start, event.end, revertFunc);
    },
    eventResize: function(event, delta, revertFunc, jsEvent, ui, view) {
      calendarHelper.updateEvent(event.id, true, delta, event.start, event.end, revertFunc);
    },
    aspectRatio:1.8,
    monthNames: $services.localization.render('xwiki.calendar.monthNames'),
    monthNamesShort: $services.localization.render('xwiki.calendar.monthNamesShort'),
    dayNames: $services.localization.render('xwiki.calendar.dayNames'),
    dayNamesShort: $services.localization.render('xwiki.calendar.dayNamesShort'),
    allDayText: "$escapetool.javascript($services.localization.render('xwiki.calendar.allDayText'))",
    axisFormat: "$escapetool.javascript($services.localization.render('xwiki.calendar.axisFormat'))",
    timeFormat: "$escapetool.javascript($timeFormat)",
    views: {
      month : {
        columnFormat: "$!services.localization.render('xwiki.calendar.columnFormat.month')",
        titleFormat: "$!services.localization.render('xwiki.calendar.titleFormat.month')",
        buttonText: "$!services.localization.render('xwiki.calendar.button.month')"
      },
      week : {
        columnFormat: "$!services.localization.render('xwiki.calendar.columnFormat.week')",
        titleFormat: "$!services.localization.render('xwiki.calendar.titleFormat.week')",
        buttonText: "$!services.localization.render('xwiki.calendar.button.week')",
        slotLabelFormat: "$escapetool.javascript($timeFormat)"
      },
      day : {
        columnFormat: "$!services.localization.render('xwiki.calendar.columnFormat.day')",
        titleFormat: "$!services.localization.render('xwiki.calendar.titleFormat.day')",
        buttonText: "$!services.localization.render('xwiki.calendar.button.day')",
        slotLabelFormat: "$escapetool.javascript($timeFormat)"
      },
      today: {
        buttonText: "$!services.localization.render('xwiki.calendar.button.today')"
      },
      plainList: {
        buttonText: "$!services.localization.render('xwiki.calendar.button.plainList')"
      }
    }
  });
  jQuery('#calendar${calcounter}-btn').click( function(e) { calendarHelper.showCreateEvent(); e.preventDefault(); });
  // helper to be used in callback above
#set($newPageParams = "template=MoccaCalendar.MoccaCalendarEventTemplate&amp;parentFROM=${escapetool.url($calendarDoc)}&amp;form_token=${services.csrf.getToken()}&amp;ocalcaction=create&amp;disabled=$disableCreationEvent")
#set($randomDocUrl = $xwiki.getURL("randomPage${util.generateRandomString(10)}",'edit',$newPageParams))
#set($updateUrlParams="?xpage=plain&amp;outputSyntax=plain&amp;calendarDoc=${escapetool.url(${calendarDoc})}&amp;")
  var calendarHelper = new XWiki.MoccaCalendar.Helper(calendar,
    "$!escapetool.javascript($dateFormat)",
    "$escapetool.javascript($jsonUrl)",
    "$escapetool.javascript($randomDocUrl)",
    "$escapetool.javascript("${updateUrl}${updateUrlParams}")",
    "$escapetool.javascript($newPageNameUrl)",
    "$escapetool.javascript($dateCheckUrl)",
    "$escapetool.javascript($deleteEventInstanceUrl)",
    "$escapetool.javascript($newPageParams)",
    "${escapetool.javascript($services.csrf.getToken())}"
  );
  });
});
&lt;/script&gt;
#if($calcounter == 0)
  #showDeleteEventsModal
  #importCalendarFileModal
#end
{{/html}}
#else ## of #if($xcontext.action=='view')
Mocca Calendar Macro
#end
#end
{{/velocity}}</code>
    </property>
    <property>
      <contentDescription/>
    </property>
    <property>
      <contentJavaType/>
    </property>
    <property>
      <contentType>No content</contentType>
    </property>
    <property>
      <defaultCategory>Content</defaultCategory>
    </property>
    <property>
      <description>Displays a Calendar</description>
    </property>
    <property>
      <id>moccacalendar</id>
    </property>
    <property>
      <name>Mocca Calendar</name>
    </property>
    <property>
      <priority/>
    </property>
    <property>
      <supportsInlineMode>0</supportsInlineMode>
    </property>
    <property>
      <visibility>Current Wiki</visibility>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>0</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>19383278-1cc2-4d08-91f4-e141dfe6af9b</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue>page</defaultValue>
    </property>
    <property>
      <description>Possible values are 'wiki','space' or 'page', where:
 'page': only events which are children pages of this page will be included,
 'space': only events which are in the space of the calendar doc will be included,
 'wiki': all events will be included.</description>
    </property>
    <property>
      <mandatory/>
    </property>
    <property>
      <name>filter</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>1</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>ac5314c2-3e3d-4e02-8239-71fdd80dc0c8</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>The calendar document whose events are shown (only if filter is set to 'page'). This value is also used as the default calendar to create new events for. If missing, the current document is used.</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>calendarDoc</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>2</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>18d46da8-12e8-4e41-96a7-cae913605353</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue>month</defaultValue>
    </property>
    <property>
      <description>The initial way the calendar is displayed; can be changed by the user. Possible values are: 'month', 'agendaWeek', 'agendaDay' or 'plainList'</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>defaultView</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>3</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>3754af83-4f3c-4288-9b40-ad22fc711e1d</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>First day (from 0 being Sunday to 6 being Monday) of the week to show in the calendar. Leave empty for Monday</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>firstDay</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>4</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>a03b024d-55d7-4b7f-a14c-65bf6f38fe12</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue>8:00</defaultValue>
    </property>
    <property>
      <description>First time to show in the calendar. Users won't see hours before this time. Leave empty for default (8:00)</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>minTime</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>5</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>bf7fe171-f1b8-4545-b3cf-7da63b114b0c</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue>23:00</defaultValue>
    </property>
    <property>
      <description>Last time to show in the calendar. Users won't see hours after this time. Leave empty for default (23:00)</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>maxTime</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>6</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>0dfd1de3-8c01-4b90-b8ce-127a69f26301</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Year of the date to show when loading the calendar. Leave empty for today</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>year</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>7</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>97daa50d-7ba8-4aaf-9182-c83ecd3ae36c</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Month (from 0 to 11) of the date to show when loading the calendar. Leave empty for today</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>month</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>8</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>6bda9131-9971-4721-9b0a-90c6a47b4658</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Day (from 1 to 31) of the date to show when loading the calendar. Leave empty for today</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>date</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>9</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>bacc1918-86a5-4a5f-8305-8adfd7367375</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>The root for the filter, to use in conjunction with the filter parameter. If specified, it will replace the usage of the calendarDoc for the application of the filter scope, in which case the the calendarDoc parameter would only be used as the default calendar. When not filled in, it defaults to the calendarDoc. If none are specified, the current document is used.</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>filterDoc</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>10</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>04a00699-7d87-4aad-a165-01213012b5d7</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>List of wiki identifiers whose events are shown, separated by a comma. If not specified, events of the current wiki are shown. If specified, the calendarDoc and filter parameters are not taken into account.</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>wikis</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>11</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>c786fbfe-af07-4bc5-bcdb-5229b3c8f8c2</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description/>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>gCal</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>12</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>3231376e-5df5-4ca3-bc03-e61a38aa439c</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description/>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>gApiKey</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>13</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>a8354333-6729-469d-8255-42a3d2fa50d5</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description/>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>iCal</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
</xwikidoc>
